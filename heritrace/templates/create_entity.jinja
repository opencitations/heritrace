{% from 'macros.jinja' import render_form_field, render_custom_properties_form with context %}

{% extends "_base.jinja" %}
{% block content %}

<h2 class="mb-4">{{ _('New Record') }}</h2>

{% with messages = get_flashed_messages(with_categories=true) %}
{% if messages %}
    <div class="alert-messages mt-4">
    {% for category, message in messages %}
        <div class="alert alert-{{ category }} alert-dismissible fade show" role="alert">
        {{ message }}
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    {% endfor %}
    </div>
{% endif %}
{% endwith %}

<form action="{{ url_for('entity.create_entity') }}" method="post" id="entityForm">
    <input type="hidden" name="structured_data" id="structured_data">
    {% if shacl %}
        <div class="form-floating mb-3">
            <select class="form-select" id="entity_type" name="entity_type">
                <option value="" disabled selected>{{_('Select an entity type')}}</option>
                {% for entity_key in entity_class_shape_pairs %}
                    <option value="{{ entity_key[0] }}" data-uri="{{ entity_key[0] }}" data-shape="{{ entity_key[1] }}">{{ entity_key | human_readable_class }}</option>
                {% endfor %}
            </select>
            <label for="entity_type" class="form-label">{{_('Select an entity type')}}</label>
        </div>

        {% for entity_key, properties in form_fields.items() %}
            {% set entity_type = entity_key[0] %}
            {% set entity_shape = entity_key[1] %}
            {% set group_id = ((entity_type, entity_shape) | human_readable_class + "_group") | replace(" ", "_") %}
            <div class="property-group mb-3" id="{{ group_id }}" data-uri="{{ entity_type }}" data-shape="{{ entity_shape }}" style="display:none">
                {% for prop, details_list in properties.items() %}
                    {% for details in details_list %}
                        {{ render_form_field(entity_type, prop, details, form_fields) }}
                    {% endfor %}
                {% endfor %}
            </div>
        {% endfor %}
    {% else %}
        <div id="custom-entity-form">
            {{ render_custom_properties_form() }}
        </div>
    {% endif %}
    <div class="mt-5">
        <button id="submitForm" type="button" class="btn btn-outline-primary">
            <i class="bi bi-check-circle me-2"></i>{{ _('Add New Record') }}
        </button>
    </div>

</form>

<script src="{{ url_for('static', filename='js/creation_workflow.js') }}"></script>
{% include 'top_level_search.jinja' %}
{% include 'primary_source_handler.jinja' %}
<script>
    window.dataset_db_triplestore = {{ dataset_db_triplestore | tojson | safe }};
    window.dataset_db_text_index_enabled = {{ dataset_db_text_index_enabled | tojson | safe }};
</script>
<script src="{{ url_for('static', filename='js/search_entity.js') }}"></script>

{% include 'validation.jinja' %}
{% include 'custom_properties.jinja' %}

<script>

    function debounce(func, wait, immediate) {
        var timeout;
        return function() {
            var context = this, args = arguments;
            var later = function() {
                timeout = null;
                if (!immediate) func.apply(context, args);
            };
            var callNow = immediate && !timeout;
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
            if (callNow) func.apply(context, args);
        };
    };

    $(document).ready(function() {
        $(window).on('pageshow', function(event) {
            initializeForm();
        });

        initializeForm();       

        $('#entity_type').change(function() {
            initializeForm();            
        });
        $(document).on('click', '.toggle-btn', function(e) {
            e.stopPropagation();
            let target = $(this).attr('data-bs-target');
            $(target).collapse('toggle');
        });

        $('[data-repeater-list]').each(function() {
            var list = $(this);
            var firstItem = list.find('[data-repeater-item]').first();
            initialCopies[list.data('repeater-list')] = firstItem.clone(true, true);

            if (list.data('ordered-by')) {
                updateSortable(list);
            }

            updateButtons(list);
        });

        updateOrderedElementsNumbering();

        const customPropertiesManager = new CustomPropertiesManager();

        $('#submitForm').click(function(){
            let errors = [];

            validateRequiredFields(errors);
            validateUrls(errors);
            validateDatatypes(errors);
            validateConditions(errors);
            validateCardinality(errors);

            if ('{{shacl}}' !== 'True') {
                if (!customPropertiesManager.hasAtLeastOneProperty()) {
                    errors.push({
                        message: '{{ _("Please provide at least one property with a value") }}'
                    });
                }
            } else {
                let hasProperties = false;
                $('[data-repeater-list]').each(function() {
                    if ($(this).find('[data-repeater-item]:visible').length > 0) {
                        hasProperties = true;
                        return false;
                    }
                });

                if (!hasProperties) {
                    errors.push({
                        message: '{{ _("Please fill out at least one property") }}'
                    });
                }
            }

            if (errors.length > 0) {
                displayValidationErrors(errors);
                return;
            }

            showPrimarySourceDialog({
                defaultPrimarySource: '{{ default_primary_source }}',
                formatSourceApiUrl: '{{ url_for("api.format_source_api") }}',
                onConfirm: function(primarySourceUrl, saveAsDefault) {
                    let structuredData = {};

                    if ('{{shacl}}' === 'True') {
                        structuredData = {
                            entity_type: $('#entity_type option:selected').data('uri'),
                            entity_shape: $('#entity_type option:selected').data('shape'),
                            properties: {}
                        };
                        let activeGroup = $('.property-group:visible');
                        collectFormData(activeGroup, structuredData.properties, '{{ shacl }}', 0);
                    } else {
                        const customProperties = customPropertiesManager.collectCustomProperties();
                        
                        // Check if user specified rdf:type in custom properties
                        let userSpecifiedType = null;
                        const rdfTypeUri = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type';
                        if (customProperties[rdfTypeUri] && customProperties[rdfTypeUri].length > 0) {
                            userSpecifiedType = customProperties[rdfTypeUri][0].value;
                        }
                        
                        structuredData = {
                            entity_type: userSpecifiedType || 'http://www.w3.org/2002/07/owl#Thing',
                            properties: {}
                        };
                        
                        // Remove rdf:type from properties if we used it as entity_type
                        if (userSpecifiedType && customProperties[rdfTypeUri]) {
                            delete customProperties[rdfTypeUri];
                        }
                        
                        Object.assign(structuredData.properties, customProperties);
                    }

                    showLoadingIndicator();

                    $.ajax({
                        url: '{{ url_for("entity.create_entity") }}',
                        type: 'POST',
                        data: {
                            structured_data: JSON.stringify(structuredData),
                            primary_source: primarySourceUrl,
                            save_default_source: saveAsDefault
                        },
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        },
                        success: function(response) {
                            hideLoadingIndicator();
                            if (response.status === 'success') {
                                window.location.href = response.redirect_url;
                            }
                        },
                        error: function(xhr) {
                            hideLoadingIndicator();
                            if (xhr.status === 400) {
                                let response = JSON.parse(xhr.responseText);
                                let errors = response.errors;

                                let errorMessage = '<ul style="list-style-type: none; padding-left: 0;">';
                                errors.forEach(function(error) {
                                    errorMessage += `
                                        <li style="margin-bottom: 8px; display: flex; align-items: flex-start; text-align: left">
                                            <span style="color: #d32f2f; margin-right: 8px;">&#9888;</span>
                                            <span>` + error + `</span>
                                        </li>
                                    `;
                                });
                                errorMessage += '</ul>';

                                Swal.fire({
                                    icon: 'error',
                                    title: '{{ _("Validation Errors") }}',
                                    html: errorMessage,
                                    confirmButtonText: '{{ _("OK") }}',
                                });
                            } else {
                                Swal.fire({
                                    icon: 'error',
                                    title: '{{ _("An error occurred") }}',
                                    text: '{{ _("Please try again later") }}',
                                    confirmButtonText: '{{ _("OK") }}',
                                });
                            }
                        }
                    });
                }
            });
        });

        function showLoadingIndicator() {
            Swal.fire({
                title: '{{ _("Validating data...") }}',
                text: '{{ _("Please wait while we validate your data") }}',
                allowOutsideClick: false,
                didOpen: () => {
                    Swal.showLoading()
                }
            });
        }

        function hideLoadingIndicator() {
            Swal.close();
        }
    });
</script>

{% endblock %}