
{% from 'macros.jinja' import render_repeater_item, render_form_field with context %}

{% extends "_base.jinja" %}
{% block content %}

<div class="container">
    <h2 class="mb-4">{{ _('Add New Record') }}</h2>

    {% with messages = get_flashed_messages(with_categories=true) %}
    {% if messages %}
        <div class="alert-messages mt-4">
        {% for category, message in messages %}
            <div class="alert alert-{{ category }} alert-dismissible fade show" role="alert">
            {{ message }}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        {% endfor %}
        </div>
    {% endif %}
    {% endwith %}

    <form action="{{ url_for('create_entity') }}" method="post" id="entityForm">
        <input type="hidden" name="structured_data" id="structured_data">
        {% if shacl %}
            <div class="form-floating mb-3">
                <select class="form-select" id="entity_type" name="entity_type">
                    <option value="" disabled selected>{{_('Select an entity type')}}</option>
                    {% for entity_type in entity_types %}
                        <option value="{{ entity_type }}" data-uri="{{ entity_type }}">{{ entity_type | human_readable_predicate(entity_types, False) }}</option>
                    {% endfor %}
                </select>
                <label for="entity_type" class="form-label">{{_('Select an entity type')}}</label>
            </div>

            {% for entity_type, properties in form_fields.items() %}
                {% set group_id = (entity_type | human_readable_predicate(entity_types, False) + "_group") | replace(" ", "_") %}
                <div class="property-group mb-3" id="{{ group_id }}" data-uri="{{ entity_type }}" style="display:none">
                    {% for prop, details_list in properties.items() %}
                        {% for details in details_list %}
                            {{ render_form_field(entity_type, prop, details, entity_types, form_fields) }}
                        {% endfor %}
                    {% endfor %}
                </div>
            {% endfor %}
        {% else %}
            <div id="custom-entity-form">
                <div id="custom-properties">
                    <div class="mb-3 custom-property" data-property-id="1">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <label for="custom_property_1" class="form-label mb-0">{{_('Property')}} 1</label>
                            <button type="button" class="btn btn-danger btn-sm remove-property" data-property-id="1">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                        <input type="url" class="form-control mb-2" id="custom_property_1" name="custom_property_1" placeholder="{{ _('Property URI') }}" required>
                        <div class="invalid-feedback mb-2">{{_('Please enter a valid URL for the property URI')}}</div>

                        <!-- Input per il valore (gestito dinamicamente in JS) -->
                        <input type="text" class="form-control custom-value-input mb-2" id="custom_value_1" name="custom_value_1" placeholder="{{ _('Value') }}">
                        <div class="invalid-feedback mb-2"></div>

                        <!-- Selettore per URI o Literal -->
                        <div class="mb-2">
                            <label for="custom_value_type_1" class="form-label">{{ _('Value Type') }}</label>
                            <select class="form-select custom-value-type" id="custom_value_type_1" name="custom_value_type_1">
                                <option value="literal">{{ _('Literal') }}</option>
                                <option value="uri">{{ _('URI') }}</option>
                            </select>
                            <div class="invalid-feedback"></div>
                        </div>

                        <!-- Dropdown per selezionare il datatype (mostrato solo per Literal) -->
                        <div class="mt-2 custom-datatype-section" id="custom_datatype_section_1">
                            <label for="custom_datatype_1" class="form-label">{{ _('Select Datatype') }}</label>
                            <select class="form-select" id="custom_datatype_1" name="custom_datatype_1">
                                {% for label, uri in datatype_options.items() %}
                                    <option value="{{ uri }}">{{ label }}</option>
                                {% endfor %}
                            </select>
                        </div>
                    </div>
                </div>
                <button type="button" id="add-property" class="btn btn-secondary mb-3">{{_('Add Property')}}</button>
            </div>
        {% endif %}
        <div class="mb-3">
            <input type="submit" value="{{ _('Create') }}" class="btn btn-primary">
        </div>

    </form>

    <script src="{{ url_for('static', filename='js/creation_workflow.js') }}"></script>

    <script>
        $(document).ready(function() {

            function validateUrlInput(inputElement) {
                if (inputElement[0].checkValidity() === false) {
                    inputElement.addClass('is-invalid');
                } else {
                    inputElement.removeClass('is-invalid');
                }
            }

            // Funzione per validare il valore in tempo reale con AJAX
            function validateValue(propertyId, value) {
                if (!value.trim()) {
                    // Se il valore è vuoto, mostra tutte le opzioni e esci dalla funzione
                    $(`#custom_datatype_${propertyId} option`).show();
                    return;
                }

                $.ajax({
                    url: '{{ url_for("validate_literal") }}',
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ value: value }),
                    success: function(response) {
                        var select = $(`#custom_datatype_${propertyId}`);
                        
                        // Nascondi tutte le opzioni prima
                        select.find('option').hide();
                        
                        // Mostra solo le opzioni valide
                        response.valid_datatypes.forEach(function(datatypeUri) {
                            select.find(`option[value="${datatypeUri}"]`).show();
                        });
                        
                        // Se l'opzione attualmente selezionata non è valida, seleziona la prima opzione valida
                        if (!response.valid_datatypes.includes(select.val())) {
                            select.val(response.valid_datatypes[0]);
                        }
                        
                        // Se non ci sono opzioni valide, mostra un messaggio
                        if (response.valid_datatypes.length === 0) {
                            select.append($('<option>', {
                                value: '',
                                text: '{{ _("No valid datatypes for this value") }}',
                                disabled: true,
                                selected: true
                            }));
                        }
                    },
                    error: function(response) {
                        console.error(response.responseJSON.error);
                    }
                });
            }

            function toggleRemoveButtons() {
                let propertyCount = $('.custom-property').length;
                if (propertyCount === 1) {
                    $('.custom-property .remove-property').hide();
                } else {
                    $('.custom-property .remove-property').show();
                }
            }

            function validateUrl(url) {
                var pattern = new RegExp('^(https?:\\/\\/)?' + // protocol
                    '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.?)+[a-z]{2,}|(\\d{1,3}\\.){3}\\d{1,3})' + // domain name and extension
                    '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*' + // port and path
                    '(\\?[;&a-z\\d%_.~+=-]*)?' + // query string
                    '(\\#[-a-z\\d_]*)?$', 'i'); // fragment locator
                return !!pattern.test(url);
            }

            $(window).on('pageshow', function(event) {
                initializeForm();
            });

            initializeForm();       

            // Handle entity type selection
            $('#entity_type').change(function() {
                initializeForm();            
            });

            // Toggle nested forms
            $(document).on('click', '.toggle-btn', function(e) {
                e.stopPropagation();
                let target = $(this).attr('data-bs-target');
                $(target).collapse('toggle');
            });

            $('[data-repeater-list]').each(function() {
                var list = $(this);
                var firstItem = list.find('[data-repeater-item]').first();
                initialCopies[list.data('repeater-list')] = firstItem.clone(true, true);

                if (list.data('ordered-by')) {
                    updateSortable(list);
                }

                updateButtons(list);
            });

            bindRepeaterEvents($(document));

            updateOrderedElementsNumbering();

            // Handle custom entity form
            let propertyCount = 1;

            // Aggiungi nuova proprietà
            $('#add-property').click(function() {
                propertyCount++;
                let newProperty = `
                    <div class="mb-3 custom-property" data-property-id="${propertyCount}">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <label for="custom_property_${propertyCount}" class="form-label mb-0">{{_('Property')}} ${propertyCount}</label>
                            <button type="button" class="btn btn-danger btn-sm remove-property" data-property-id="${propertyCount}">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                        <!-- Input per l'URI della proprietà -->
                        <input type="url" class="form-control mb-2" id="custom_property_${propertyCount}" name="custom_property_${propertyCount}" placeholder="{{ _('Property URI') }}">
                        <div class="invalid-feedback mb-2">{{_('Please enter a valid URL for the property URI')}}</div>

                        <!-- Input per il valore -->
                        <input type="text" class="form-control mb-2 custom-value-input" id="custom_value_${propertyCount}" name="custom_value_${propertyCount}" placeholder="{{ _('Value') }}">

                        <!-- Selettore per URI o Literal -->
                        <div class="mb-2">
                            <label for="custom_value_type_${propertyCount}" class="form-label">{{ _('Value Type') }}</label>
                            <select class="form-select custom-value-type" id="custom_value_type_${propertyCount}" name="custom_value_type_${propertyCount}">
                                <option value="literal">{{ _('Literal') }}</option>
                                <option value="uri">{{ _('URI') }}</option>
                            </select>
                        </div>

                        <!-- Sezione per datatype, mostrata solo se l'utente sceglie Literal -->
                        <div class="mt-2 custom-datatype-section" id="custom_datatype_section_${propertyCount}">
                            <label for="custom_datatype_${propertyCount}" class="form-label">{{ _('Select Datatype') }}</label>
                            <select class="form-select" id="custom_datatype_${propertyCount}" name="custom_datatype_${propertyCount}">
                                {% for label, uri in datatype_options.items() %}
                                    <option value="{{ uri }}">{{ label }}</option>
                                {% endfor %}
                            </select>
                        </div>
                    </div>
                `;
                $('#custom-properties').append(newProperty);
                toggleRemoveButtons();
            });

            // Gestione della rimozione delle proprietà
            $('#custom-properties').on('click', '.remove-property', function() {
                let propertyId = $(this).data('property-id');
                $(`div[data-property-id="${propertyId}"]`).remove();
                updatePropertyLabels();
                toggleRemoveButtons();
            });

            function updatePropertyLabels() {
                $('.custom-property').each(function(index) {
                    let newIndex = index + 1;
                    $(this).attr('data-property-id', newIndex);

                    // Aggiorna l'etichetta della proprietà
                    $(this).find('.form-label').first().text(`{{_('Property')}} ${newIndex}`);

                    // Aggiorna gli attributi di input e select per Property URI, Value e Datatype
                    $(this).find('input, select').each(function() {
                        let oldName = $(this).attr('name');
                        let oldId = $(this).attr('id');
                        let newName = oldName.replace(/\d+/, newIndex);
                        let newId = oldId.replace(/\d+/, newIndex);
                        
                        $(this).attr('name', newName);
                        $(this).attr('id', newId);
                    });

                    // Aggiorna l'attributo `data-property-id` del pulsante di rimozione
                    $(this).find('.remove-property').attr('data-property-id', newIndex);
                });

                // Ricalcola il numero di proprietà attuali
                propertyCount = $('.custom-property').length;
            }

            $(document).on('input', '.custom-value-input', function() {
                var propertyId = $(this).attr('id').split('_').pop();
                var value = $(this).val();
                var valueType = $(`#custom_value_type_${propertyId}`).val();

                // Resetta il datatype su xsd:string ogni volta che il valore cambia
                $(`#custom_datatype_${propertyId}`).val('http://www.w3.org/2001/XMLSchema#string');

                // Chiama validateValue solo se il tipo di valore è 'literal'
                if (valueType === 'literal') {
                    validateValue(propertyId, value);
                }
            });

            // Gestione della visualizzazione dinamica del datatype
            $(document).on('change', '.custom-value-type', function() {
                var propertyId = $(this).attr('id').split('_').pop();
                var selectedValueType = $(this).val();
                var valueInput = $(`#custom_value_${propertyId}`);
                var datatypeSection = $(`#custom_datatype_section_${propertyId}`);
                
                if (selectedValueType === 'literal') {
                    datatypeSection.show();
                    validateValue(propertyId, valueInput.val());
                } else {
                    datatypeSection.hide();
                }
            });
            
            $(document).on('focus', '.custom-datatype-section select', function() {
                var propertyId = $(this).attr('id').split('_').pop();
                var value = $(`#custom_value_${propertyId}`).val();

                if (value) {
                    validateValue(propertyId, value);
                }
            });

            // Valida l'URI dell'entità
            $('#custom_entity_uri').on('input change', function() {
                validateUrlInput($(this));
            });

            // Validazione per i campi Property URI
            $(document).on('input change', '.custom-property input[type="url"]', function() {
                validateUrlInput($(this));
            });

            $(document).on('change', '.custom-value-type', function() {
                var propertyId = $(this).attr('id').split('_').pop();
                var selectedValueType = $(this).val();
                
                // Trova l'input associato a questo valore
                var valueInput = $(`#custom_value_${propertyId}`);
                
                if (selectedValueType === 'uri') {
                    // Aggiungi il messaggio di errore se non esiste già
                    if (valueInput.next('.invalid-feedback').length === 0) {
                        valueInput.after('<div class="invalid-feedback mb-2">{{ _("Please enter a valid URL") }}</div>');
                    }
                    // Cambia il tipo dell'input in 'url' e aggiungi validazione URL
                    valueInput.attr('type', 'url');
                    valueInput.on('input change', function() {
                        validateUrlInput($(this));
                    });
                } else {
                    // Cambia il tipo dell'input in 'text' se è un literal
                    valueInput.attr('type', 'text');
                    // Rimuovi la validazione URL se non è più un URI
                    valueInput.off('input change', validateUrlInput);
                    valueInput.removeClass('is-invalid');  // Rimuovi eventuali stati di errore
                    valueInput.next('.invalid-feedback').remove();  // Rimuovi il messaggio di errore
                }
            });

            // Gestione della visualizzazione dinamica del datatype
            $(document).on('change', '.custom-value-input', function() {
                var propertyId = $(this).attr('id').split('_').pop();
                // Reset del datatype su xsd:string ogni volta che il valore cambia
                $(`#custom_datatype_${propertyId}`).val('http://www.w3.org/2001/XMLSchema#string');                
            });

            toggleRemoveButtons();

            function validateUrl(url) {
                var pattern = new RegExp('^(https?:\\/\\/)?' + // protocollo
                    '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.?)+[a-z]{2,}|(\\d{1,3}\\.){3}\\d{1,3})' + // nome dominio e estensione
                    '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*' + // porta e percorso
                    '(\\?[;&a-z\\d%_.~+=-]*)?' + // query string
                    '(\\#[-a-z\\d_]*)?$', 'i'); // frammento
                return !!pattern.test(url);
            }

            // Funzione per validare i campi richiesti
            function validateRequiredFields(errors) {
                $(':input[required]:visible').each(function() {
                    if (!$(this).val()) {
                        let fieldName = $(this).closest('.form-floating').find('label').text() || 
                                        $(this).attr('placeholder') || 
                                        $(this).attr('name') || 
                                        '{{ _("Unknown field") }}';
                        errors.push({
                            field: $(this),
                            message: `{{ _("The field") }} "${fieldName}" {{ _("is required") }}`
                        });
                    }
                });
            }

            // Funzione per validare gli URL
            function validateUrls(errors) {
                $('input[type="url"]:visible').each(function() {
                    let url = $(this).val();
                    if (url && !validateUrl(url)) {
                        let fieldName = $(this).closest('.form-floating').find('label').text() || 
                                        $(this).attr('placeholder') || 
                                        $(this).attr('name') || 
                                        '{{ _("Unknown URL field") }}';
                        errors.push({
                            field: $(this),
                            message: `{{ _("Please enter a valid URL for") }} "${fieldName}"`
                        });
                    }
                });
            }

            // Funzione per validare i campi in base al datatype
            function validateDatatypes(errors) {
                $('[data-datatypes]:visible').each(function() {
                    let input = $(this);
                    let datatypes = input.data('datatypes').split(',');
                    let value = input.val();
                    let isValidDatatype = false;
                    let expectedFormat = '';

                    datatypes.forEach(function(datatype) {
                        switch(datatype) {
                            case 'http://www.w3.org/2001/XMLSchema#string':
                                isValidDatatype = true; // All strings are valid
                                expectedFormat = '{{ _("any text") }}';
                                break;
                            case 'http://www.w3.org/2001/XMLSchema#normalizedString':
                                isValidDatatype = !/[\n\r\t]/.test(value);
                                expectedFormat = '{{ _("text without line breaks or tabs") }}';
                                break;
                            case 'http://www.w3.org/2001/XMLSchema#integer':
                            case 'http://www.w3.org/2001/XMLSchema#int':
                                isValidDatatype = /^-?\d+$/.test(value);
                                expectedFormat = '{{ _("whole number") }}';
                                break;
                            case 'http://www.w3.org/2001/XMLSchema#positiveInteger':
                                isValidDatatype = /^\d+$/.test(value) && parseInt(value) > 0;
                                expectedFormat = '{{ _("positive whole number") }}';
                                break;
                            case 'http://www.w3.org/2001/XMLSchema#negativeInteger':
                                isValidDatatype = /^-\d+$/.test(value) && parseInt(value) < 0;
                                expectedFormat = '{{ _("negative whole number") }}';
                                break;
                            case 'http://www.w3.org/2001/XMLSchema#nonNegativeInteger':
                                isValidDatatype = /^\d+$/.test(value) && parseInt(value) >= 0;
                                expectedFormat = '{{ _("non-negative whole number") }}';
                                break;
                            case 'http://www.w3.org/2001/XMLSchema#nonPositiveInteger':
                                isValidDatatype = /^-?\d+$/.test(value) && parseInt(value) <= 0;
                                expectedFormat = '{{ _("non-positive whole number") }}';
                                break;
                            case 'http://www.w3.org/2001/XMLSchema#byte':
                                isValidDatatype = /^-?\d+$/.test(value) && -128 <= parseInt(value) && parseInt(value) <= 127;
                                expectedFormat = '{{ _("whole number between -128 and 127") }}';
                                break;
                            case 'http://www.w3.org/2001/XMLSchema#short':
                                isValidDatatype = /^-?\d+$/.test(value) && -32768 <= parseInt(value) && parseInt(value) <= 32767;
                                expectedFormat = '{{ _("whole number between -32768 and 32767") }}';
                                break;
                            case 'http://www.w3.org/2001/XMLSchema#long':
                                isValidDatatype = /^-?\d+$/.test(value) && -2147483648 <= parseInt(value) && parseInt(value) <= 2147483647;
                                expectedFormat = '{{ _("whole number between -2147483648 and 2147483647") }}';
                                break;
                            case 'http://www.w3.org/2001/XMLSchema#unsignedByte':
                                isValidDatatype = /^\d+$/.test(value) && 0 <= parseInt(value) && parseInt(value) <= 255;
                                expectedFormat = '{{ _("whole number between 0 and 255") }}';
                                break;
                            case 'http://www.w3.org/2001/XMLSchema#unsignedShort':
                                isValidDatatype = /^\d+$/.test(value) && 0 <= parseInt(value) && parseInt(value) <= 65535;
                                expectedFormat = '{{ _("whole number between 0 and 65535") }}';
                                break;
                            case 'http://www.w3.org/2001/XMLSchema#unsignedLong':
                            case 'http://www.w3.org/2001/XMLSchema#unsignedInt':
                                isValidDatatype = /^\d+$/.test(value) && 0 <= parseInt(value) && parseInt(value) <= 4294967295;
                                expectedFormat = '{{ _("whole number between 0 and 4294967295") }}';
                                break;
                            case 'http://www.w3.org/2001/XMLSchema#decimal':
                            case 'http://www.w3.org/2001/XMLSchema#float':
                            case 'http://www.w3.org/2001/XMLSchema#double':
                                isValidDatatype = /^-?\d*\.?\d+$/.test(value);
                                expectedFormat = '{{ _("number (can include decimal point)") }}';
                                break;
                            case 'http://www.w3.org/2001/XMLSchema#duration':
                                isValidDatatype = /^P(?=\d|T\d)(?:(\d+)Y)?(?:(\d+)M)?(?:(\d+)D)?(?:T(?:(\d+)H)?(?:(\d+)M)?(?:(\d+(?:\.\d+)?)S)?)?$/.test(value);
                                expectedFormat = '{{ _("duration (e.g. P1Y2M3DT4H5M6S)") }}';
                                break;
                            case 'http://www.w3.org/2001/XMLSchema#dayTimeDuration':
                                isValidDatatype = /^P(?:\d+D)?(?:T(?:\d+H)?(?:\d+M)?(?:\d+(?:\.\d+)?S)?)?$/.test(value);
                                expectedFormat = '{{ _("day and time duration (e.g. P1DT2H3M4S)") }}';
                                break;
                            case 'http://www.w3.org/2001/XMLSchema#yearMonthDuration':
                                isValidDatatype = /^P(?:\d+Y)?(?:\d+M)?$/.test(value);
                                expectedFormat = '{{ _("year and month duration (e.g. P1Y2M)") }}';
                                break;
                            case 'http://www.w3.org/2001/XMLSchema#gYearMonth':
                                isValidDatatype = /^(\d{4})-(\d{2})$/.test(value) && new Date(value + '-01').getMonth() === parseInt(value.split('-')[1]) - 1;
                                expectedFormat = '{{ _("year and month in format YYYY-MM") }}';
                                break;
                            case 'http://www.w3.org/2001/XMLSchema#gYear':
                                isValidDatatype = /^\d{4}$/.test(value);
                                expectedFormat = '{{ _("year in format YYYY") }}';
                                break;
                            case 'http://www.w3.org/2001/XMLSchema#dateTime':
                                isValidDatatype = /^-?\d{4,}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(?:\.\d+)?(?:Z|[+-]\d{2}:\d{2})?$/.test(value);
                                expectedFormat = '{{ _("date and time (e.g. 2023-06-15T14:30:00+02:00)") }}';
                                break;
                            case 'http://www.w3.org/2001/XMLSchema#dateTimeStamp':
                                isValidDatatype = /^-?\d{4,}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}(?:\.\d+)?(Z|[+-]\d{2}:\d{2})$/.test(value);
                                expectedFormat = '{{ _("date and time with timezone (e.g. 2023-06-15T14:30:00+02:00)") }}';
                                break;
                            case 'http://www.w3.org/2001/XMLSchema#date':
                                isValidDatatype = /^\d{4}-\d{2}-\d{2}$/.test(value) && !isNaN(new Date(value).getTime());
                                expectedFormat = '{{ _("date in format YYYY-MM-DD") }}';
                                break;
                            case 'http://www.w3.org/2001/XMLSchema#time':
                                isValidDatatype = /^([01]\d|2[0-3]):?([0-5]\d):?([0-5]\d)$/.test(value);
                                expectedFormat = '{{ _("time in format HH:MM:SS") }}';
                                break;
                            case 'http://www.w3.org/2001/XMLSchema#gMonth':
                                isValidDatatype = /^--(0[1-9]|1[0-2])$/.test(value);
                                expectedFormat = '{{ _("month in format --MM") }}';
                                break;
                            case 'http://www.w3.org/2001/XMLSchema#gDay':
                                isValidDatatype = /^---(0[1-9]|[12]\d|3[01])$/.test(value);
                                expectedFormat = '{{ _("day in format ---DD") }}';
                                break;
                            case 'http://www.w3.org/2001/XMLSchema#gMonthDay':
                                isValidDatatype = /^--(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01])$/.test(value);
                                expectedFormat = '{{ _("month and day in format --MM-DD") }}';
                                break;
                            case 'http://www.w3.org/2001/XMLSchema#boolean':
                                isValidDatatype = /^(true|false|1|0)$/i.test(value);
                                expectedFormat = '{{ _("true or false") }}';
                                break;
                            case 'http://www.w3.org/2001/XMLSchema#hexBinary':
                                isValidDatatype = /^[0-9A-Fa-f]*$/.test(value);
                                expectedFormat = '{{ _("hexadecimal digits") }}';
                                break;
                            case 'http://www.w3.org/2001/XMLSchema#base64Binary':
                                isValidDatatype = /^[A-Za-z0-9+/]*={0,2}$/.test(value);
                                expectedFormat = '{{ _("base64 encoded data") }}';
                                break;
                            case 'http://www.w3.org/2001/XMLSchema#anyURI':
                                isValidDatatype = /^(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \.-]*)*\/?$/.test(value);
                                expectedFormat = '{{ _("valid URL") }}';
                                break;
                            case 'http://www.w3.org/2001/XMLSchema#QName':
                            case 'http://www.w3.org/2001/XMLSchema#NOTATION':
                                isValidDatatype = /^(?:[a-zA-Z_][\w.-]*:)?[a-zA-Z_][\w.-]*$/.test(value);
                                expectedFormat = '{{ _("qualified name") }}';
                                break;
                            case 'http://www.w3.org/2001/XMLSchema#ENTITY':
                            case 'http://www.w3.org/2001/XMLSchema#ID':
                            case 'http://www.w3.org/2001/XMLSchema#IDREF':
                            case 'http://www.w3.org/2001/XMLSchema#NCName':
                                isValidDatatype = /^[a-zA-Z_][\w.-]*$/.test(value);
                                expectedFormat = '{{ _("valid XML name") }}';
                                break;
                            case 'http://www.w3.org/2001/XMLSchema#ENTITIES':
                            case 'http://www.w3.org/2001/XMLSchema#IDREFS':
                                isValidDatatype = value.split(/\s+/).every(token => /^[a-zA-Z_][\w.-]*$/.test(token));
                                expectedFormat = '{{ _("list of valid XML names") }}';
                                break;
                            case 'http://www.w3.org/2001/XMLSchema#NMTOKEN':
                                isValidDatatype = /^[\w.-]+$/.test(value);
                                expectedFormat = '{{ _("valid XML token") }}';
                                break;
                            case 'http://www.w3.org/2001/XMLSchema#NMTOKENS':
                                isValidDatatype = value.split(/\s+/).every(token => /^[\w.-]+$/.test(token));
                                expectedFormat = '{{ _("list of valid XML tokens") }}';
                                break;
                            case 'http://www.w3.org/2001/XMLSchema#Name':
                                isValidDatatype = /^[a-zA-Z_:][\w.-]*$/.test(value);
                                expectedFormat = '{{ _("valid XML Name") }}';
                                break;
                        }
                        if (isValidDatatype) return false; // Esci dal ciclo se trova un datatype valido
                    });

                    if (!isValidDatatype) {
                        let fieldName = input.closest('.form-floating').find('label').text() || 
                                        input.attr('placeholder') || 
                                        input.attr('name') || 
                                        '{{ _("This field") }}';
                        errors.push({
                            field: input,
                            message: `${fieldName}: {{ _("Invalid input. Expected") }} ${expectedFormat}.`
                        });
                    }
                });
            }

            // Funzione per validare le condizioni
            function validateConditions(errors) {
                $('input[data-conditions]:visible').each(function() {
                    let input = $(this);
                    let conditions = input.data('conditions');
                    let value = input.val();

                    conditions.forEach(function(conditionObj) {
                        var condition = conditionObj.condition;
                        var pattern = new RegExp(conditionObj.pattern);
                        var message = conditionObj.message;

                        var currentList = input.closest('[data-repeater-list]');
                        var dependentField = currentList.siblings().find('[data-repeater-item]').not('.repeater-template').find('[data-predicate-uri="' + condition.path + '"]');

                        var dependentValue;
                        if (dependentField.is('select')) {
                            dependentValue = dependentField.val();
                        } else if (dependentField.is('input')) {
                            dependentValue = dependentField.val();
                        } else {
                            var inputOrSelect = dependentField.find('input, select').closest();
                            dependentValue = inputOrSelect.val();
                        }

                        // Controlla se il campo dipendente è disponibile e visibile
                        if (dependentValue === condition.value) {
                            // Applicare la validazione
                            if (!pattern.test(value)) {
                                errors.push({
                                    field: input,
                                    message: message
                                });
                            }
                        }
                    });
                });
            }

            // Funzione per evidenziare i campi con errori
            function highlightValidationErrors(errors) {
                // Rimuovi gli stati di errore precedenti
                $('.is-invalid').removeClass('is-invalid');
                $('.invalid-feedback').hide();

                errors.forEach(function(error) {
                    if (error.field) {
                        error.field.addClass('is-invalid');
                        error.field.siblings('.invalid-feedback').first().text(error.message).show();
                    }
                });
            }

            $('#entityForm').off('submit').on('submit', function(event) {
                event.preventDefault();

                let errors = [];

                validateRequiredFields(errors);
                validateUrls(errors);
                validateDatatypes(errors);
                validateConditions(errors);

                // Verifica che almeno una proprietà sia specificata
                if ('{{shacl}}' !== 'True') {
                    let hasAtLeastOneProperty = false;
                    $('.custom-property:visible').each(function() {
                        let propertyUri = $(this).find('input[type="url"]').val();
                        let propertyValue = $(this).find('.custom-value-input').val();

                        if (propertyUri && propertyValue) {
                            hasAtLeastOneProperty = true;
                            return false; // Esce dal ciclo each
                        }
                    });

                    if (!hasAtLeastOneProperty) {
                        errors.push({
                            message: '{{ _("Please provide at least one property with a value") }}'
                        });
                    }
                } else {
                    // Per SHACL, verifica che ci sia almeno una proprietà compilata
                    let hasProperties = false;
                    $('[data-repeater-list]').each(function() {
                        if ($(this).find('[data-repeater-item]:visible').length > 0) {
                            hasProperties = true;
                            return false; // Esce dal ciclo each
                        }
                    });

                    if (!hasProperties) {
                        errors.push({
                            message: '{{ _("Please fill out at least one property") }}'
                        });
                    }
                }

                // Gestione degli errori
                if (errors.length > 0) {
                    let errorMessages = errors.map(function(error) {
                        return error.message;
                    });
                    let errorMessage = `
                        <ul style="list-style-type: none; padding-left: 0;">
                            ${errorMessages.map(error => `
                                <li style="margin-bottom: 8px; display: flex; align-items: flex-start; text-align: left">
                                    <span style="color: #d32f2f; margin-right: 8px;">&#9888;</span>
                                    <span>${error}</span>
                                </li>
                            `).join('')}
                        </ul>
                    `;

                    Swal.fire({
                        icon: 'error',
                        title: '{{ _("Invalid Submission") }}',
                        html: errorMessage,
                        confirmButtonText: '{{ _("OK") }}',
                    });

                    highlightValidationErrors(errors);

                    return; // Interrompe l'invio del form
                }

                // Se non ci sono errori, procedi con l'invio dei dati
                let structuredData = {};

                if ('{{shacl}}' === 'True') {
                    structuredData = {
                        entity_type: $('#entity_type').val(),
                        properties: {}
                    };
                    collectFormData($('#entityForm'), '{{ shacl }}', structuredData.properties);
                } else {
                    structuredData = {
                        properties: {}
                    };
                    collectFormData(null, '{{ shacl }}', structuredData.properties);
                }

                showLoadingIndicator();

                $.ajax({
                    url: '{{ url_for("create_entity") }}',
                    type: 'POST',
                    data: {
                        structured_data: JSON.stringify(structuredData)
                    },
                    headers: {
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    success: function(response) {
                        hideLoadingIndicator();
                        if (response.status === 'success') {
                            // Reindirizza alla pagina dell'entità creata
                            window.location.href = response.redirect_url;
                        }
                    },
                    error: function(xhr) {
                        hideLoadingIndicator();
                        if (xhr.status === 400) {
                            let response = JSON.parse(xhr.responseText);
                            let errors = response.errors;

                            // Mostra gli errori all'utente
                            let errorMessage = '<ul style="list-style-type: none; padding-left: 0;">';
                            errors.forEach(function(error) {
                                errorMessage += `
                                    <li style="margin-bottom: 8px; display: flex; align-items: flex-start; text-align: left">
                                        <span style="color: #d32f2f; margin-right: 8px;">&#9888;</span>
                                        <span>` + error + `</span>
                                    </li>
                                `;
                            });
                            errorMessage += '</ul>';

                            Swal.fire({
                                icon: 'error',
                                title: '{{ _("Validation Errors") }}',
                                html: errorMessage,
                                confirmButtonText: '{{ _("OK") }}',
                            });
                        } else {
                            // Gestisci altri errori (ad esempio errori 500)
                            Swal.fire({
                                icon: 'error',
                                title: '{{ _("An error occurred") }}',
                                text: '{{ _("Please try again later.") }}',
                                confirmButtonText: '{{ _("OK") }}',
                            });
                        }
                    }
                });
            });

            // On change of date type selection
            $(document).on('change', '.date-type-selector', function() {
                showAppropriateDateInput($(this));
            });

            // Initialize date inputs on page load
            $('.date-type-selector').each(function() {
                showAppropriateDateInput($(this));
            });

            function validateFieldWithConditions(input) {
                var conditions = input.data('conditions');
                var inputValue = input.val();

                if (!conditions) {
                    return;
                }

                var isValid = true;
                var errorMessage = '';
                conditions.forEach(function(conditionObj) {
                    var condition = conditionObj.condition;
                    var pattern = new RegExp(conditionObj.pattern);
                    var message = conditionObj.message;

                    var currentList = input.closest('[data-repeater-list]');
                    var dependentField = currentList.siblings().find('[data-repeater-item]').not('.repeater-template').find('[data-predicate-uri="' + condition.path + '"]');

                    var dependentValue;
                    if (dependentField.is('select')) {
                        dependentValue = dependentField.val();
                    } else if (dependentField.is('input')) {
                        dependentValue = dependentField.val();
                    } else {
                        var inputOrSelect = dependentField.find('input, select').closest();
                        dependentValue = inputOrSelect.val();
                    }

                    if (dependentValue === condition.value) {
                        // Applicare la validazione
                        if (!pattern.test(inputValue)) {
                            isValid = false;
                            errorMessage = message;
                        }
                    }
                });

                if (!isValid) {
                    input.addClass('is-invalid');
                    input.siblings('.invalid-feedback').first().text(errorMessage).show();
                } else {
                    input.removeClass('is-invalid');
                    input.next('.invalid-feedback').first().text('').hide();
                }
            }

            $(document).on('change', 'select', function() {
                $(this).closest('[data-object-class]').find('input[data-conditions]').each(function() {
                    validateFieldWithConditions($(this));
                });
            });

            $(document).on('blur', 'input[data-conditions]', function() {
                validateFieldWithConditions($(this));
            });

            function showLoadingIndicator() {
                Swal.fire({
                    title: '{{ _("Validating data...") }}',
                    text: '{{ _("Please wait while we validate your data.") }}',
                    allowOutsideClick: false,
                    didOpen: () => {
                        Swal.showLoading()
                    }
                });
            }

            function hideLoadingIndicator() {
                Swal.close();
            }
        });
    </script>
</div>

{% endblock %}