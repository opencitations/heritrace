
{% from 'macros.jinja' import render_repeater_item, render_form_field with context %}

{% extends "_base.jinja" %}
{% block content %}

<h2 class="mb-4">{{ _('Add New Record') }}</h2>

{% with messages = get_flashed_messages(with_categories=true) %}
{% if messages %}
    <div class="alert-messages mt-4">
    {% for category, message in messages %}
        <div class="alert alert-{{ category }} alert-dismissible fade show" role="alert">
        {{ message }}
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    {% endfor %}
    </div>
{% endif %}
{% endwith %}

<form action="{{ url_for('create_entity') }}" method="post" id="entityForm">
    <input type="hidden" name="structured_data" id="structured_data">
    {% if shacl %}
        <div class="form-floating mb-3">
            <select class="form-select" id="entity_type" name="entity_type">
                <option value="" disabled selected>{{_('Select an entity type')}}</option>
                {% for entity_type in entity_types %}
                    <option value="{{ entity_type }}" data-uri="{{ entity_type }}">{{ entity_type | human_readable_predicate(entity_types, False) }}</option>
                {% endfor %}
            </select>
            <label for="entity_type" class="form-label">{{_('Select an entity type')}}</label>
        </div>

        {% for entity_type, properties in form_fields.items() %}
            {% set group_id = (entity_type | human_readable_predicate(entity_types, False) + "_group") | replace(" ", "_") %}
            <div class="property-group mb-3" id="{{ group_id }}" data-uri="{{ entity_type }}" style="display:none">
                {% for prop, details_list in properties.items() %}
                    {% for details in details_list %}
                        {{ render_form_field(entity_type, prop, details, entity_types, form_fields) }}
                    {% endfor %}
                {% endfor %}
            </div>
        {% endfor %}
    {% else %}
        <div id="custom-entity-form">
            <div id="custom-properties">
                <div class="mb-3 custom-property" data-property-id="1">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <label for="custom_property_1" class="form-label mb-0">{{_('Property')}} 1</label>
                        <button type="button" class="btn btn-danger btn-sm remove-property" data-property-id="1">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                    <input type="url" class="form-control mb-2" id="custom_property_1" name="custom_property_1" placeholder="{{ _('Property URI') }}" required>
                    <div class="invalid-feedback mb-2">{{_('Please enter a valid URL for the property URI')}}</div>

                    <!-- Input per il valore (gestito dinamicamente in JS) -->
                    <input type="text" class="form-control custom-value-input mb-2" id="custom_value_1" name="custom_value_1" placeholder="{{ _('Value') }}">
                    <div class="invalid-feedback mb-2"></div>

                    <!-- Selettore per URI o Literal -->
                    <div class="mb-2">
                        <label for="custom_value_type_1" class="form-label">{{ _('Value Type') }}</label>
                        <select class="form-select custom-value-type" id="custom_value_type_1" name="custom_value_type_1">
                            <option value="literal">{{ _('Literal') }}</option>
                            <option value="uri">{{ _('URI') }}</option>
                        </select>
                        <div class="invalid-feedback"></div>
                    </div>

                    <!-- Dropdown per selezionare il datatype (mostrato solo per Literal) -->
                    <div class="mt-2 custom-datatype-section" id="custom_datatype_section_1">
                        <label for="custom_datatype_1" class="form-label">{{ _('Select Datatype') }}</label>
                        <select class="form-select" id="custom_datatype_1" name="custom_datatype_1">
                            {% for label, uri in datatype_options.items() %}
                                <option value="{{ uri }}">{{ label }}</option>
                            {% endfor %}
                        </select>
                    </div>
                </div>
            </div>
            <button type="button" id="add-property" class="btn btn-secondary mb-3">{{_('Add Property')}}</button>
        </div>
    {% endif %}
    <div class="mt-5">
        <button id="submitForm" type="button" class="btn btn-outline-primary">
            <i class="bi bi-check-circle me-2"></i>{{ _('Add New Record') }}
        </button>
    </div>

</form>

<script src="{{ url_for('static', filename='js/creation_workflow.js') }}"></script>
<script>
    window.dataset_db_triplestore = {{ dataset_db_triplestore | tojson | safe }};
    window.dataset_db_text_index_enabled = {{ dataset_db_text_index_enabled | tojson | safe }};
</script>
<script src="{{ url_for('static', filename='js/search_entity.js') }}"></script>

{% include 'validation.jinja' %}

<script>
    $(document).ready(function() {
        // Funzione per validare il valore in tempo reale con AJAX
        function validateValue(propertyId, value) {
            if (!value.trim()) {
                // Se il valore è vuoto, mostra tutte le opzioni e esci dalla funzione
                $(`#custom_datatype_${propertyId} option`).show();
                return;
            }

            $.ajax({
                url: '{{ url_for("validate_literal") }}',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ value: value }),
                success: function(response) {
                    var select = $(`#custom_datatype_${propertyId}`);
                    
                    // Nascondi tutte le opzioni prima
                    select.find('option').hide();
                    
                    // Mostra solo le opzioni valide
                    response.valid_datatypes.forEach(function(datatypeUri) {
                        select.find(`option[value="${datatypeUri}"]`).show();
                    });
                    
                    // Se l'opzione attualmente selezionata non è valida, seleziona la prima opzione valida
                    if (!response.valid_datatypes.includes(select.val())) {
                        select.val(response.valid_datatypes[0]);
                    }
                    
                    // Se non ci sono opzioni valide, mostra un messaggio
                    if (response.valid_datatypes.length === 0) {
                        select.append($('<option>', {
                            value: '',
                            text: '{{ _("No valid datatypes for this value") }}',
                            disabled: true,
                            selected: true
                        }));
                    }
                },
                error: function(response) {
                    console.error(response.responseJSON.error);
                }
            });
        }

        function toggleRemoveButtons() {
            let propertyCount = $('.custom-property').length;
            if (propertyCount === 1) {
                $('.custom-property .remove-property').hide();
            } else {
                $('.custom-property .remove-property').show();
            }
        }


        $(window).on('pageshow', function(event) {
            initializeForm();
        });

        initializeForm();       

        // Handle entity type selection
        $('#entity_type').change(function() {
            initializeForm();            
        });

        // Toggle nested forms
        $(document).on('click', '.toggle-btn', function(e) {
            e.stopPropagation();
            let target = $(this).attr('data-bs-target');
            $(target).collapse('toggle');
        });

        $('[data-repeater-list]').each(function() {
            var list = $(this);
            var firstItem = list.find('[data-repeater-item]').first();
            initialCopies[list.data('repeater-list')] = firstItem.clone(true, true);

            if (list.data('ordered-by')) {
                updateSortable(list);
            }

            updateButtons(list);
        });

        updateOrderedElementsNumbering();

        // Handle custom entity form
        let propertyCount = 1;

        // Aggiungi nuova proprietà
        $('#add-property').click(function() {
            propertyCount++;
            let newProperty = `
                <div class="mb-3 custom-property" data-property-id="${propertyCount}">
                    <div class="d-flex justify-content-between align-items-center mb-2">
                        <label for="custom_property_${propertyCount}" class="form-label mb-0">{{_('Property')}} ${propertyCount}</label>
                        <button type="button" class="btn btn-danger btn-sm remove-property" data-property-id="${propertyCount}">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                    <!-- Input per l'URI della proprietà -->
                    <input type="url" class="form-control mb-2" id="custom_property_${propertyCount}" name="custom_property_${propertyCount}" placeholder="{{ _('Property URI') }}">
                    <div class="invalid-feedback mb-2">{{_('Please enter a valid URL for the property URI')}}</div>

                    <!-- Input per il valore -->
                    <input type="text" class="form-control mb-2 custom-value-input" id="custom_value_${propertyCount}" name="custom_value_${propertyCount}" placeholder="{{ _('Value') }}">

                    <!-- Selettore per URI o Literal -->
                    <div class="mb-2">
                        <label for="custom_value_type_${propertyCount}" class="form-label">{{ _('Value Type') }}</label>
                        <select class="form-select custom-value-type" id="custom_value_type_${propertyCount}" name="custom_value_type_${propertyCount}">
                            <option value="literal">{{ _('Literal') }}</option>
                            <option value="uri">{{ _('URI') }}</option>
                        </select>
                    </div>

                    <!-- Sezione per datatype, mostrata solo se l'utente sceglie Literal -->
                    <div class="mt-2 custom-datatype-section" id="custom_datatype_section_${propertyCount}">
                        <label for="custom_datatype_${propertyCount}" class="form-label">{{ _('Select Datatype') }}</label>
                        <select class="form-select" id="custom_datatype_${propertyCount}" name="custom_datatype_${propertyCount}">
                            {% for label, uri in datatype_options.items() %}
                                <option value="{{ uri }}">{{ label }}</option>
                            {% endfor %}
                        </select>
                    </div>
                </div>
            `;
            $('#custom-properties').append(newProperty);
            toggleRemoveButtons();
        });

        // Gestione della rimozione delle proprietà
        $('#custom-properties').on('click', '.remove-property', function() {
            let propertyId = $(this).data('property-id');
            $(`div[data-property-id="${propertyId}"]`).remove();
            updatePropertyLabels();
            toggleRemoveButtons();
        });

        function updatePropertyLabels() {
            $('.custom-property').each(function(index) {
                let newIndex = index + 1;
                $(this).attr('data-property-id', newIndex);

                // Aggiorna l'etichetta della proprietà
                $(this).find('.form-label').first().text(`{{_('Property')}} ${newIndex}`);

                // Aggiorna gli attributi di input e select per Property URI, Value e Datatype
                $(this).find('input, select').each(function() {
                    let oldName = $(this).attr('name');
                    let oldId = $(this).attr('id');
                    let newName = oldName.replace(/\d+/, newIndex);
                    let newId = oldId.replace(/\d+/, newIndex);
                    
                    $(this).attr('name', newName);
                    $(this).attr('id', newId);
                });

                // Aggiorna l'attributo `data-property-id` del pulsante di rimozione
                $(this).find('.remove-property').attr('data-property-id', newIndex);
            });

            // Ricalcola il numero di proprietà attuali
            propertyCount = $('.custom-property').length;
        }

        $(document).on('input', '.custom-value-input', function() {
            var propertyId = $(this).attr('id').split('_').pop();
            var value = $(this).val();
            var valueType = $(`#custom_value_type_${propertyId}`).val();

            // Resetta il datatype su xsd:string ogni volta che il valore cambia
            $(`#custom_datatype_${propertyId}`).val('http://www.w3.org/2001/XMLSchema#string');

            // Chiama validateValue solo se il tipo di valore è 'literal'
            if (valueType === 'literal') {
                validateValue(propertyId, value);
            }
        });

        // Gestione della visualizzazione dinamica del datatype
        $(document).on('change', '.custom-value-type', function() {
            var propertyId = $(this).attr('id').split('_').pop();
            var selectedValueType = $(this).val();
            var valueInput = $(`#custom_value_${propertyId}`);
            var datatypeSection = $(`#custom_datatype_section_${propertyId}`);
            
            if (selectedValueType === 'literal') {
                datatypeSection.show();
                validateValue(propertyId, valueInput.val());
            } else {
                datatypeSection.hide();
            }
        });
        
        $(document).on('focus', '.custom-datatype-section select', function() {
            var propertyId = $(this).attr('id').split('_').pop();
            var value = $(`#custom_value_${propertyId}`).val();

            if (value) {
                validateValue(propertyId, value);
            }
        });

        // Valida l'URI dell'entità
        $('#custom_entity_uri').on('input change', function() {
            validateUrlInput($(this));
        });

        // Validazione per i campi Property URI
        $(document).on('input change', '.custom-property input[type="url"]', function() {
            validateUrlInput($(this));
        });

        $(document).on('change', '.custom-value-type', function() {
            var propertyId = $(this).attr('id').split('_').pop();
            var selectedValueType = $(this).val();
            
            // Trova l'input associato a questo valore
            var valueInput = $(`#custom_value_${propertyId}`);
            
            if (selectedValueType === 'uri') {
                // Aggiungi il messaggio di errore se non esiste già
                if (valueInput.next('.invalid-feedback').length === 0) {
                    valueInput.after('<div class="invalid-feedback mb-2">{{ _("Please enter a valid URL") }}</div>');
                }
                // Cambia il tipo dell'input in 'url' e aggiungi validazione URL
                valueInput.attr('type', 'url');
                valueInput.on('input change', function() {
                    validateUrlInput($(this));
                });
            } else {
                // Cambia il tipo dell'input in 'text' se è un literal
                valueInput.attr('type', 'text');
                // Rimuovi la validazione URL se non è più un URI
                valueInput.off('input change', validateUrlInput);
                valueInput.removeClass('is-invalid');  // Rimuovi eventuali stati di errore
                valueInput.next('.invalid-feedback').remove();  // Rimuovi il messaggio di errore
            }
        });

        // Gestione della visualizzazione dinamica del datatype
        $(document).on('change', '.custom-value-input', function() {
            var propertyId = $(this).attr('id').split('_').pop();
            // Reset del datatype su xsd:string ogni volta che il valore cambia
            $(`#custom_datatype_${propertyId}`).val('http://www.w3.org/2001/XMLSchema#string');                
        });

        toggleRemoveButtons();

        $('#submitForm').click(function(){
            let errors = [];

            validateRequiredFields(errors);
            validateUrls(errors);
            validateDatatypes(errors);
            validateConditions(errors);

            // Verifica che almeno una proprietà sia specificata
            if ('{{shacl}}' !== 'True') {
                let hasAtLeastOneProperty = false;
                $('.custom-property:visible').each(function() {
                    let propertyUri = $(this).find('input[type="url"]').val();
                    let propertyValue = $(this).find('.custom-value-input').val();

                    if (propertyUri && propertyValue) {
                        hasAtLeastOneProperty = true;
                        return false; // Esce dal ciclo each
                    }
                });

                if (!hasAtLeastOneProperty) {
                    errors.push({
                        message: '{{ _("Please provide at least one property with a value") }}'
                    });
                }
            } else {
                // Per SHACL, verifica che ci sia almeno una proprietà compilata
                let hasProperties = false;
                $('[data-repeater-list]').each(function() {
                    if ($(this).find('[data-repeater-item]:visible').length > 0) {
                        hasProperties = true;
                        return false; // Esce dal ciclo each
                    }
                });

                if (!hasProperties) {
                    errors.push({
                        message: '{{ _("Please fill out at least one property") }}'
                    });
                }
            }

            // Gestione degli errori
            if (errors.length > 0) {
                displayValidationErrors(errors);   
                return; // Interrompe l'invio del form
            }

            // Se non ci sono errori, procedi con l'invio dei dati
            let structuredData = {};

            if ('{{shacl}}' === 'True') {
                structuredData = {
                    entity_type: $('#entity_type').val(),
                    properties: {}
                };
                collectFormData($('#entityForm'), structuredData.properties, '{{ shacl }}', 0);
            } else {
                structuredData = {
                    properties: {}
                };
                collectFormData(null, structuredData.properties, '{{ shacl }}', 0);
            }

            showLoadingIndicator();

            $.ajax({
                url: '{{ url_for("create_entity") }}',
                type: 'POST',
                data: {
                    structured_data: JSON.stringify(structuredData)
                },
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                },
                success: function(response) {
                    hideLoadingIndicator();
                    if (response.status === 'success') {
                        // Reindirizza alla pagina dell'entità creata
                        window.location.href = response.redirect_url;
                    }
                },
                error: function(xhr) {
                    hideLoadingIndicator();
                    if (xhr.status === 400) {
                        let response = JSON.parse(xhr.responseText);
                        let errors = response.errors;

                        // Mostra gli errori all'utente
                        let errorMessage = '<ul style="list-style-type: none; padding-left: 0;">';
                        errors.forEach(function(error) {
                            errorMessage += `
                                <li style="margin-bottom: 8px; display: flex; align-items: flex-start; text-align: left">
                                    <span style="color: #d32f2f; margin-right: 8px;">&#9888;</span>
                                    <span>` + error + `</span>
                                </li>
                            `;
                        });
                        errorMessage += '</ul>';

                        Swal.fire({
                            icon: 'error',
                            title: '{{ _("Validation Errors") }}',
                            html: errorMessage,
                            confirmButtonText: '{{ _("OK") }}',
                        });
                    } else {
                        // Gestisci altri errori (ad esempio errori 500)
                        Swal.fire({
                            icon: 'error',
                            title: '{{ _("An error occurred") }}',
                            text: '{{ _("Please try again later") }}',
                            confirmButtonText: '{{ _("OK") }}',
                        });
                    }
                }
            });
        });

        function showLoadingIndicator() {
            Swal.fire({
                title: '{{ _("Validating data...") }}',
                text: '{{ _("Please wait while we validate your data") }}',
                allowOutsideClick: false,
                didOpen: () => {
                    Swal.showLoading()
                }
            });
        }

        function hideLoadingIndicator() {
            Swal.close();
        }
    });
</script>

{% endblock %}