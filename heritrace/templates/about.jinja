{% from 'macros.jinja' import render_triple, render_repeater_item with context %}

{% set unique_counter = namespace(value=0) %}

{% set namespace_render_repeater_item = namespace(counter=0) %}

{% extends "_base.jinja" %}

{% block content %}
<div class="container">
    <h2 class="mb-4 word-wrap">{{_('About')}} {{ subject | human_readable_predicate(subject_classes, False) }}</h2>

    {% with messages = get_flashed_messages(with_categories=true) %}
        {% if messages %}
            <div class="alert-messages mt-4">
            {% for category, message in messages %}
                <div class="alert alert-{{ category }} alert-dismissible fade show" role="alert">
                {{ message }}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            {% endfor %}
            </div>
        {% endif %}
    {% endwith %}

    {% if history[subject] %}
    <div>
        <a href="{{ url_for('entity_history', entity_uri=subject) }}" class="btn btn-outline-primary">
            <i class="bi bi-clock-history"></i> {{_('Time machine')}}
        </a>
    </div>
    {% endif %}
    <div class="triples mb-5">
        {% if grouped_triples %}
            <div class="d-flex justify-content-start align-items-baseline my-4">
                <button id="editEntityBtn" class="btn btn-outline-primary me-2" title="{{_('Edit')}}">
                    <i class="bi bi-pencil"></i>
                </button>
            </div>

            {% for display_name, data in grouped_triples.items() %}
                {% set predicate = data['property'] %}
                {% set isDraggable = data['is_draggable'] %}
                <div class="property-group" data-uri="{{entity_type}}">
                    {% if data['triples'] or data['property'] in can_be_added %}
                        {% set objectClass = namespace(value='') %}
                        {% for details in form_fields[entity_type][predicate] %}
                            {% if details['objectClass'] %}
                                {% set objectClass.value = details['objectClass'] %}
                            {% endif %}
                        {% endfor %}
                        {%if data['triples'] %}
                            <h6 class="item-label">{{ display_name | human_readable_predicate(subject_classes) }}</h6>
                        {% endif %}
                        <div class="predicate-ul" 
                            data-repeater-list="{{ display_name | replace(' ', '_') }}" 
                            {% if isDraggable %}data-ordered-by="{{ data.ordered_by }}"{% endif %} 
                            data-uri="{{ data['property'] }}"
                            data-object-class="{{ objectClass.value }}">
                            {% if data['property'] in can_be_added %}
                                {% for details in form_fields[entity_type][predicate] %}
                                    {% set shape = details.get('nodeShape') %}
                                    {% if details.get('nodeShape') == data.get('shape') or not data.get('shape') %}
                                        {% set key = (predicate, entity_type, shape) %}
                                        {% if key in predicate_details_map %}
                                            {% set unique_id_base = (entity_type | human_readable_predicate(entitytypes, False) | replace(" ", "") + "_" + predicate | human_readable_predicate(entitytypes, False) | replace(" ", "") | string) + "_" + namespace_render_repeater_item.counter | string %}
                                            {{ render_repeater_item(entity_type, predicate, predicate_details_map[key], entity_types, form_fields, depth=0, unique_id_base=unique_id_base, label=None, is_template=True) }}
                                            {% set namespace_render_repeater_item.counter = namespace_render_repeater_item.counter + 1 %}
                                        {% endif %}
                                    {% endif %}
                                {% endfor %}
                            {% endif %}
                            {% for triple_data in data['triples'] %}
                                {% set unique_counter.value = unique_counter.value + 1 %}
                                {{ render_triple(triple_data['triple'], subject, triple_data['external_entity'], isDraggable, triple_data['object'], data['ordered_by'], unique_counter.value, data, display_name) }}
                            {% endfor %}

                            <!-- Move the add-button inside the ul -->
                            {% if data['property'] in can_be_added %}
                                {% set predicate = data['property'] %}
                                {% for details in form_fields[entity_type][predicate] %}
                                    {% set shape = details.get('nodeShape') %}
                                    {% if details.get('nodeShape') == data.get('shape') or not data.get('shape') %}
                                        {% set key = (predicate, entity_type, shape) %}
                                        {% if key in predicate_details_map %}
                                            {% set unique_id_base = (entity_type | human_readable_predicate(entitytypes, False) | replace(" ", "") + "_" + predicate | human_readable_predicate(entitytypes, False) | replace(" ", "") | string) + "_" + namespace_render_repeater_item.counter | string %}
                                            <!-- Button to add new items -->
                                            <div class="text-start ms-2 mt-3" data-repeater-create>
                                                <button type="button" class="add-button">
                                                    <i class="bi bi-plus-circle"></i>
                                                    {{ _("Add %(element_type)s", element_type=details.displayName or (data['property'] | human_readable_predicate(entity_types, False))) }}
                                                </button>
                                            </div>
                                        {% endif %}
                                    {% endif %}
                                {% endfor %}
                            {% endif %}
                        </div>
                    {% endif %}
                </div>
            {% endfor %}
        {% else %}
            <p class="alert alert-warning mt-5 mb-4">{{_('There is no information related to this entity in the dataset')}}</p>
            <button class="btn btn-outline-success add-button" title="{{_('Add new information')}}">{{_("Let's add some metadata")}}</button>
            {{ add_form() }}
        {% endif %}
    </div>
    <div>
        <button class="btn btn-primary" id="saveChangesBtn" style="display: none;">{{_('Save Changes')}}</button>
        <button class="btn btn-secondary" id="cancelChangesBtn" style="display: none;">{{_('Cancel')}}</button>
    </div>
</div>

<script>
    var entity_type = "{{ entity_type }}";
    var subject = "{{ subject }}";
</script>

{% include 'validation.jinja' %}

<script src="{{ url_for('static', filename='js/creation_workflow.js') }}"></script>

<script>
    $(document).ready(function () {

        var isInEditMode = false;

        $('[data-repeater-create]').hide();         

        bindRepeaterEvents($(document));

        const optional_values = {{ optional_values|tojson|safe }};
        const shacl = {{ shacl|tojson|safe }};

        function toggleEditForm(listItem) {
            const form = listItem.find('.edit-form');
            const valueSpan = listItem.find('.object-value');
            form.toggleClass('d-none');
            valueSpan.toggleClass('d-none');
        }

        function showAddFormOrAlert() {
            can_be_added = {{ can_be_added|tojson|safe }}
            if (can_be_added == null) {
                $(`.add-form`).toggleClass('d-none');
            } else {
                if (can_be_added.length == 0) {
                    Swal.fire({
                        title: "{{ _('Warning') }}",
                        text: "{{ _('You cannot add more properties; the limit for each property has been reached') }}",
                        icon: 'warning',
                        confirmButtonColor: '#3085d6'
                    });
                } else {
                    $(`.add-form`).toggleClass('d-none');
                }
            }
        }

        function updateObjectInput() {
            if (!shacl) {
                $('.object-input-text').show();
                $('.object-input').prop('disabled', true);
                return
            }
            const selectedPredicate = $('.predicate-select').val();
            if (optional_values[selectedPredicate] && optional_values[selectedPredicate].length > 0) {
                $('.object-input-text').hide().prop('disabled', true);
                $('.object-input').show().prop('disabled', false).find('option').hide().filter(`[data-predicate="${selectedPredicate}"]`).show();
            } else {
                $('.object-input').hide().prop('disabled', true);
                $('.object-input-text').show().prop('disabled', false);
            }
        }

        function restoreOriginalValues() {
            $('.editable-field, .editable-select').each(function() {
                $(this).val($(this).data('original-value'));
            });
        }

        function toggleDateStrike(dateInputGroup, isStriked) {
            const dateDisplayContainer = dateInputGroup.find('.date-display-container');
            const dateInputContainer = dateInputGroup.find('.date-input-container');
            const dateTypeSelectorContainer = dateInputGroup.find('.date-type-selector-container');

            if (isStriked) {
                // Nascondi gli input della data e il selettore del tipo di data
                dateInputContainer.hide();
                dateTypeSelectorContainer.hide();

                // Mostra il date-display-container e applica la classe 'striked'
                dateDisplayContainer.show();
                dateDisplayContainer.find('.date-display').addClass('striked');
            } else {
                // Mostra gli input della data e il selettore del tipo di data
                dateInputContainer.show();
                dateTypeSelectorContainer.show();

                // Nascondi il date-display-container e rimuovi la classe 'striked'
                dateDisplayContainer.hide();
                dateDisplayContainer.find('.date-display').removeClass('striked');
            }
        }

        function collectNewProperties() {
            var subject = '{{ subject }}';

            var structuredData = {
                entity_type: '{{ entity_type }}',
                properties: {}
            };

            collectFormData($('.triples'), structuredData.properties, shacl);

            Object.keys(structuredData.properties).forEach(function (predicate) {
                structuredData.properties[predicate].forEach(function (property) {
                    if (property.orderedBy) {
                        // Create the new order array
                        var newOrder = [];
                        var shape = property.shape || '';

                        // Iterate through the elements in the repeater list and collect their IDs or values
                        $('[data-repeater-list]').find('[data-repeater-item]').each(function () {
                            $item = $(this)
                            if ($item.data('shape') == shape) {
                                var objectId = $item.data('old-object-id');
                                var tempId = $item.data('temp-id');
                                if (objectId) {
                                    newOrder.push(objectId);
                                } else if (tempId) {
                                    newOrder.push(tempId);
                                }
                            }
                        });

                        var existingOrderIndex = pendingChanges.findIndex(function(change) {
                            return change.action === 'order' && 
                                change.subject === subject && 
                                change.predicate === predicate &&
                                change.shape === shape;
                        });

                        if (existingOrderIndex !== -1) {
                            // Update the existing order action
                            pendingChanges[existingOrderIndex].object = newOrder;
                        } else {
                            // Add a new order action
                            storePendingChange('order', subject, predicate, newOrder, property.orderedBy, shape);
                        }
                    }
                });
            });

            if (Object.keys(structuredData.properties).length > 0) {
                pendingChanges.push({
                    action: 'create',
                    subject: subject,
                    data: structuredData
                });
            }
        }

        $('.edit-button').click(function () {
            const isRedirect = $(this).find('i').hasClass('bi-arrow-right-square');
            if (isRedirect) {
                pass
            } else {
                toggleEditForm($(this).closest('.property-value'));
            }
        });

        $('.cancel-button').click(function () {
            toggleEditForm($(this).closest('.property-value'));
            toggleEditForm($(this).closest('form'));
        });
        $('.add-button').click(function() {
            showAddFormOrAlert();
            updateObjectInput();
        });
        $('.cancel-add-button').click(function() {
            $('.add-form').addClass('d-none');
        });
        $('.predicate-select').change(updateObjectInput);

        $('#editEntityBtn').click(function(){
            if (isInEditMode) {
                restoreOriginalValues();
                $(".editable-field").prop('readonly', true);
                $(".editable-select").prop('disabled', true);
                $(".delete-button").hide();
                $(".drag-handle").children().addClass('d-none');
                $("#saveChangesBtn").hide();
                $("#cancelChangesBtn").hide();
                $(".date-type-selector-container").addClass('d-none');
                $(".date-input-container").hide();
                $(".date-display-container").show();
                $("[data-repeater-create]").hide();
                $(this).removeClass('edit-mode');
                isInEditMode = false;
                pendingChanges = [];
            } else {
                updateOrderedElementsNumbering();
                $('.editable-field, .editable-select').each(function() {
                    $(this).data('original-value', $(this).val());
                });
                $(".editable-field").prop('readonly', false);
                $(".editable-select").prop('disabled', false);
                $(".delete-button").show();
                $(".drag-handle").children().removeClass('d-none');
                $("#saveChangesBtn").show();
                $("#cancelChangesBtn").show();
                $(".date-type-selector-container").removeClass('d-none');
                $(".date-input-container").show();
                $('.date-type-selector').each(function() {
                    showAppropriateDateInput($(this));
                });
                $(".date-display-container").hide();
                $("[data-repeater-create]").show();
                $(this).addClass('edit-mode');
                isInEditMode = true;
            }
        });
        $('#cancelChangesBtn').click(function(){
            $('#editEntityBtn').click();
        });
        $('.editable-field[id^="new_value_"], .editable-select, .date-type-selector').change(function() {
            const listItem = $(this).closest('.property-value');
            const subject = listItem.data('subject-id');
            const predicate = listItem.data('property-id');
            const oldObject = listItem.data('old-object-id');
            const shape = listItem.data('shape');

            let newObject;

            if ($(this).hasClass('date-type-selector')) {
                const selectedType = $(this).val();
                newObject = listItem.find(`#new_value_${$(this).attr('id').replace('_date_type', '')}_${selectedType}`).val();
            } else {
                newObject = $(this).val();
            }

            storePendingChange('update', subject, predicate, oldObject, newObject, shape);
        });
        $(document).on('click', '.delete-button', function() {
            const listItem = $(this).closest('.property-value');
            const dateInputGroup = listItem.find('.date-input-group');
            toggleDateStrike(dateInputGroup, true);
            const subject = listItem.data('subject-id');
            const predicate = listItem.data('property-id');
            const object_value = listItem.data('old-object-id');
            const shape = listItem.data('shape');
            listItem.find('.tripleObject').addClass('striked');
            listItem.find('.editable-field').prop('readonly', true);
            listItem.find('.editable-select').prop('disabled', true);
            $(this).hide();
            storePendingChange('delete', subject, predicate, object_value, shape);
            const undoButton = $('<button>')
                .addClass('btn btn-outline-warning undo-delete-button mt-3 mx-2')
                .html('<i class="bi bi-arrow-counterclockwise"></i>')
                .insertAfter($(this));
                undoButton.click(function() {
                    listItem.find('.tripleObject').removeClass('striked');
                    listItem.find('.editable-field').prop('readonly', false);
                    listItem.find('.editable-select').prop('disabled', false);
                    $(this).siblings('.delete-button').show();
                    $(this).hide();
                    const index = pendingChanges.findIndex(change => change.action === 'delete' && change.subject === subject && change.predicate === predicate && change.object === object_value);
                    if (index > -1) {
                        pendingChanges.splice(index, 1);
                    }
                    const dateInputGroup = listItem.find('.date-input-group');
                    toggleDateStrike(dateInputGroup, false);
                });
        });
        $('#saveChangesBtn').click(function(){
            let errors = [];

            validateRequiredFields(errors);
            validateUrls(errors);
            validateDatatypes(errors);
            validateConditions(errors);

            if (errors.length > 0) {
                let errorMessages = errors.map(function(error) {
                    return error.message;
                });
                let errorMessage = `
                    <ul style="list-style-type: none; padding-left: 0;">
                        ${errorMessages.map(error => `
                            <li style="margin-bottom: 8px; display: flex; align-items: flex-start; text-align: left">
                                <span style="color: #d32f2f; margin-right: 8px;">&#9888;</span>
                                <span>${error}</span>
                            </li>
                        `).join('')}
                    </ul>
                `;

                Swal.fire({
                    icon: 'error',
                    title: '{{ _("Invalid Submission") }}',
                    html: errorMessage,
                    confirmButtonText: '{{ _("OK") }}',
                });

                highlightValidationErrors(errors);
                return;
            }

            collectNewProperties();

            if (pendingChanges.length === 0) {
                Swal.fire({
                    icon: 'warning',
                    title: '{{ _("No Changes Detected") }}',
                    text: '{{ _("Oops! It looks like you haven\\'t made any changes yet. Try updating a field first") }}',
                    confirmButtonColor: '#3085d6'
                });
                return;
            }

            $.ajax({
                url: '/apply_changes',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(pendingChanges),
                success: function(response) {
                    if (response.status === "success") {
                        pendingChanges = [];
                        Swal.fire({
                            icon: 'success',
                            title: 'Success',
                            text: response.message,
                            confirmButtonColor: '#3085d6'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                window.location.href = '{{url_for('about', subject=subject)}}';
                            }
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: response.message,
                            confirmButtonColor: '#d33'
                        });
                    }
                },
                error: function(jqXHR, textStatus, errorThrown) {
                    pendingChanges = [];
                    response = $.parseJSON(jqXHR.responseText);
                    let errorMessage = response && response.message ? response.message : "{{_('An unexpected error occurred!')}}";
                    Swal.fire({
                        icon: 'error',
                        title: "{{_('Oops...')}}",
                        html: errorMessage,
                        confirmButtonColor: '#d33'
                    });
                }
            });
        });

        $(document).on('change', '.date-input', function() {
            $(this).closest('.date-input-group').find('.date-display').text($(this).val());
        });
   });
</script>
{% endblock %}