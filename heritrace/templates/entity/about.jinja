{% from 'macros.jinja' import render_triple, render_repeater_item, render_custom_properties_form with context %}

{% set unique_counter = namespace(value=0) %}

{% set namespace_render_repeater_item = namespace(counter=0) %}

{% extends "_base.jinja" %}

{% block content %}

<style>
.inverse-references .list-group-item,
.similar-resources .list-group-item {
    transition: background-color 0.2s;
}

.inverse-references .list-group-item:hover,
.similar-resources .list-group-item:hover {
    background-color: rgba(0,0,0,0.02);
}

.inverse-references .text-break,
.similar-resources .text-break {
    word-break: break-word !important;
    word-wrap: break-word !important;
}

/* Ensure the action buttons maintain their shape */
.inverse-references .redirection-btn,
.similar-resources .merge-btn {
    flex-shrink: 0;
}

/* Adjust spacing for wrapped content */
.inverse-references .list-group-item .d-flex,
.similar-resources .list-group-item .d-flex {
    row-gap: 0.5rem;
}

.list-group-item {
    border: none;
}
</style>

<h2 class="mb-4 word-wrap"><em>{{ subject | human_readable_entity((entity_type, entity_shape), context) }}</em></h2>

{% with messages = get_flashed_messages(with_categories=true) %}
    {% if messages %}
        <div class="alert-messages mt-4">
        {% for category, message in messages %}
            <div class="alert alert-{{ category }} alert-dismissible fade show" role="alert">
            {{ message }}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        {% endfor %}
        </div>
    {% endif %}
{% endwith %}



<div class="row g-3 my-4">
    {% if not is_deleted and grouped_triples %}
        <div class="col-12 col-md-4">
            <button id="editEntityBtn" class="btn btn-outline-primary w-100" title="{{ _('Edit this resource') }}" type="button">
                <i class="bi bi-pencil me-2"></i>{{ _('Edit Resource') }}
            </button>
        </div>
        <div class="col-12 col-md-4">
            <button id="deleteEntityBtn" class="btn btn-outline-danger w-100" title="{{ _('Delete this resource') }}" type="button">
                <i class="bi bi-trash me-2"></i>{{ _('Delete Resource') }}
            </button>
        </div>
    {% endif %}
    {% if history[subject] %}
        <div class="col-12 col-md-4">
            <a id="historyBtn" href="{{ url_for('entity.entity_history', entity_uri=subject) }}" class="btn btn-outline-primary w-100" title="{{ _('Time Machine') }}" type="button">
                <i class="bi bi-clock-history me-2"></i>{{ _('Time Machine') }}
            </a>
        </div>
    {% endif %}
</div>

<div class="triples mb-5">
    {% if is_deleted %}
        <div class="alert alert-info">
            <i class="bi bi-info-circle-fill me-2"></i>
            {{_('This entity has been deleted. You can view its history using the Time Machine above')}}
        </div>
    {% elif grouped_triples %}
        {% for display_name, data in grouped_triples.items() %}
            {% set predicate = data['property'] %}
            {% set isDraggable = data['is_draggable'] %}
            {% set subject_shape = data.get('subjectShape') %}
            {% set object_shape = data.get('objectShape') %}
            {% set entity_key = (entity_type, subject_shape) %}
            {% set key = (predicate, entity_key, object_shape) %}
            {% set has_details = key in predicate_details_map %}

            {% set details = predicate_details_map[key] if has_details else {} %}
            <div class="property-group" data-uri="{{entity_type}}">
                {% if data['triples'] or predicate in can_be_added %}
                    
                    {%if data['triples'] %}
                        <h6 class="item-label">{{ display_name | human_readable_predicate((data.get("subjectClass"), data.get("subjectShape"))) }}</h6>
                    {% endif %}
                    {% set object_class = details.objectClass if has_details and details.objectClass else '' %}

                    <div class="predicate-ul" 
                        data-repeater-list="{{ display_name | replace(' ', '_') }}" 
                        {% if isDraggable %}data-ordered-by="{{ data.ordered_by }}"{% endif %} 
                        data-uri="{{ predicate }}"
                        data-object-class="{{ object_class }}"
                        {% if has_details and details.max %}data-max-items="{{ details.max }}"{% endif %}
                        {% if has_details and details.min %}data-min-items="{{ details.min }}"{% endif %}
                        {% if predicate in mandatory_values %}data-skip-collect="true"{% endif %}>
                        {% if predicate in can_be_added and has_details %}
                            {% set unique_id_base = (((entity_type, object_shape) | human_readable_class) | replace(" ", "") + "_" + (predicate | human_readable_predicate((entity_type, object_shape))) | replace(" ", "") | string) + "_" + namespace_render_repeater_item.counter | string %}
                            {{ render_repeater_item(entity_type=entity_type, prop=predicate, details=details, form_fields=form_fields, depth=0, unique_id_base=unique_id_base, index=None, is_template=True) }}
                            {% set namespace_render_repeater_item.counter = namespace_render_repeater_item.counter + 1 %}
                        {% endif %}
                        {% for triple_data in data['triples'] %}
                            {% set unique_counter.value = unique_counter.value + 1 %}
                            {{ render_triple(triple=triple_data['triple'], subject=subject, externalEntity=triple_data['external_entity'], isDraggable=isDraggable, object=triple_data['object'], orderedBy=data['ordered_by'], unique_id=unique_counter.value, grouped_triples_data=data, display_name=display_name, object_class=object_class) }}
                        {% endfor %}

                        {% if predicate in can_be_added and has_details %}
                            {% set unique_id_base = (((entity_type, subject_shape) | human_readable_class) | replace(" ", "") + "_" + (predicate | human_readable_predicate((entity_type, subject_shape))) | replace(" ", "") | string) + "_" + namespace_render_repeater_item.counter | string %}
                            <div class="text-start mt-3" data-repeater-create>
                                <button type="button" class="add-button">
                                    <i class="bi bi-plus-circle"></i>
                                    {{ _("Add %(element_type)s", element_type=details.displayName) }}
                                </button>
                            </div>
                            {% set namespace_render_repeater_item.counter = namespace_render_repeater_item.counter + 1 %}
                        {% endif %}
                    </div>
                {% endif %}
            </div>
        {% endfor %}
    {% else %}
        <p class="alert alert-warning mt-5 mb-4">{{_('There is no information related to this resource in the dataset')}}</p>
    {% endif %}
</div>

{% set entity_key = (entity_type, entity_shape) %}
{% set has_form_fields = entity_key in form_fields %}
{% if not is_deleted and (not shacl or (shacl and not has_form_fields)) %}
<div class="custom-properties-section mt-5 mb-5" style="display: none;">
    {{ render_custom_properties_form() }}
</div>
{% endif %}

<div class="row g-3 mb-5">
    <div class="col-12 col-sm-6">
        <button class="btn btn-outline-primary w-100" id="saveChangesBtn" style="display: none;">
            <i class="bi bi-check-circle me-2"></i>{{_('Save Changes')}}
        </button>
    </div>
    <div class="col-12 col-sm-6">
        <button class="btn btn-outline-secondary w-100" id="cancelChangesBtn" style="display: none;">
            <i class="bi bi-x-circle me-2"></i>{{_('Cancel')}}
        </button>
    </div>
</div>

<div class="linked-resources mt-5">
    <h4 class="mb-4">{{ _('Resources Referencing This') }}</h4>
    {# Container for dynamically loaded linked resources #}
    <div class="list-group linked-resources-container">
        {# Content will be added dynamically by JavaScript #}
    </div>
    {# Loading indicator #}
    <div class="linked-resources-loading text-center my-3" style="display: none;">
        <div class="spinner-border spinner-border-sm" role="status">
            <span class="visually-hidden">{{ _("Loading...") }}</span>
        </div>
    </div>
    {# Message shown when no linked resources are found #}
    <p class="alert alert-info linked-resources-none" style="display: none;">
        {{ _('No resources reference this resource') }}
    </p>
    {# "Load More" button #}
    <div class="text-center mt-3">
        <button id="loadMoreLinkedResourcesBtn" class="btn btn-outline-primary" style="display: none;">
            <i class="bi bi-arrow-down-circle me-2"></i>{{ _('Load More') }}
        </button>
    </div>
</div>

{# New Similar Resources Section #}
<div class="similar-resources mt-5">
    <h4 class="mb-4">{{ _('Similar Resources') }}</h4>
    {# Always render the container div, initially empty #}
    <div class="list-group">
        {# Content will be added dynamically by JavaScript #}
    </div>
    {# Always render the 'no results' message, initially hidden by JS #}
    <p class="alert alert-info" style="display: none;">{{ _('No potentially similar resources found') }}</p>
    {# Add a "Load More" button, initially hidden #}
    <div class="text-center mt-3">
        <button id="loadMoreSimilarResourcesBtn" class="btn btn-outline-primary" style="display: none;">
            <i class="bi bi-arrow-down-circle me-2"></i>{{ _('Load More') }}
        </button>
    </div>
</div>
{# End New Similar Resources Section #}

{% include 'primary_source_handler.jinja' %}
<script>
    let originalOrder = {};
    const optional_values = {{ optional_values|tojson|safe }};
    const shacl = {{ shacl|tojson|safe }};

    const entity_type = "{{ entity_type }}";
    const entity_shape = "{{ entity_shape }}";
    const subject = "{{ subject }}";
    const default_primary_source = "{{ default_primary_source }}";
    const format_source_api_url = "{{ url_for('api.format_source_api') }}";

    window.dataset_db_triplestore = {{ dataset_db_triplestore | tojson | safe }};
    window.dataset_db_text_index_enabled = {{ dataset_db_text_index_enabled | tojson | safe }};
</script>

{% include 'validation.jinja' %}
{% include 'custom_properties.jinja' %}

<script src="{{ url_for('static', filename='js/resource_loader.js') }}"></script>
{% include 'entity/similar_resources.jinja' %}
{% include 'entity/linked_resources.jinja' %}

{% include 'lock_workflow.jinja' with context %}

<script src="{{ url_for('static', filename='js/creation_workflow.js') }}"></script>
{% include 'top_level_search.jinja' %}
<script src="{{ url_for('static', filename='js/search_entity.js') }}"></script>

<script>
    function handleAffectedEntities(affectedEntities, orphanStrategy, proxyStrategy, onConfirm, onCancel) {
        if (!affectedEntities || affectedEntities.length === 0) {
            onConfirm([], false);
            return;
        }

        // Separa le entità per tipo
        const orphans = affectedEntities.filter(entity => !entity.is_intermediate);
        const intermediates = affectedEntities.filter(entity => entity.is_intermediate);

        // Verifica se ci sono entità da mostrare in base alle strategie
        const showOrphans = orphans.length > 0 && orphanStrategy !== 'delete';
        const showProxies = intermediates.length > 0 && proxyStrategy !== 'delete';

        // Se non c'è nulla da mostrare, procedi senza conferma
        if (!showOrphans && !showProxies) {
            // Determina se eliminare automaticamente in base alle strategie
            const shouldDeleteOrphans = orphanStrategy === 'delete' && orphans.length > 0;
            const shouldDeleteProxies = proxyStrategy === 'delete' && intermediates.length > 0;
            onConfirm(affectedEntities, shouldDeleteOrphans || shouldDeleteProxies);
            return;
        }

        let messageContent = '<div class="text-start">';

        // Aggiungi sezione per gli orfani se presenti e la strategia non è DELETE
        if (showOrphans) {
            messageContent += `
                <p>{{_("The following resources will become orphaned (they will no longer be connected to any other resource in the dataset):")}}</p>
                <ul class="list-unstyled mb-4" style="margin-left: 1rem;">
                    ${orphans.map(entity => `
                        <li style="margin-bottom: 0.5rem;">
                            <i class="bi bi-dash-circle text-danger me-2"></i>
                            <span>${entity.label}</span>
                            <small class="text-muted">(${entity.type})</small>
                        </li>
                    `).join('')}
                </ul>`;
        }

        // Aggiungi sezione per le relazioni intermedie se presenti e la strategia non è DELETE
        if (showProxies) {
            messageContent += `
                <p>{{_("The following intermediate relationships (proxies) will also be removed:")}}</p>
                <ul class="list-unstyled mb-4" style="margin-left: 1rem;">
                    ${intermediates.map(entity => `
                        <li style="margin-bottom: 0.5rem;">
                            <i class="bi bi-link-45deg text-warning me-2"></i>
                            <span>${entity.label}</span>
                            <small class="text-muted">(${entity.type})</small>
                        </li>
                    `).join('')}
                </ul>`;
        }

        messageContent += `<p>{{_("Would you like to delete all these entities now?")}}</p></div>`;

        Swal.fire({
            title: "{{_('Warning')}}",
            html: messageContent,
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText:  "{{_('Yes, delete affected entities')}}",
            cancelButtonText:  "{{_('No, keep affected entities')}}",
            confirmButtonColor: '#d33',
            cancelButtonColor: '#3085d6'
        }).then((result) => {
            if (result.isConfirmed) {
                onConfirm(affectedEntities, true);
            } else if (result.dismiss === Swal.DismissReason.cancel) {
                onCancel ? onCancel(affectedEntities, false) : onConfirm(affectedEntities, false);
            }
        });
    }

    function processOrphanCheck(changes, entity_type, entity_shape, successCallback) {
        // Filter out changes that involve literals - only process delete operations that involve entities
        const entityChanges = changes.filter(change => {
            // Only process delete operations
            if (change.action !== "delete") {
                return false;
            }
            
            // Always include entity deletions (no predicate)
            if (!change.predicate) {
                return true;
            }
            
            // For property deletions, we need to determine if the object is an entity or a literal
            // We can do this by checking if the object value is a URI
            const objectValue = change.object;
            if (!objectValue) {
                return false;
            }
            
            // Use the existing validateUrl function from validation.jinja
            return validateUrl(objectValue);
        });

        // Show loading indicator
        Swal.fire({
            title: "{{ _('Checking dependencies...') }}",
            html: "{{ _('Checking for affected entities. Please wait...') }}",
            allowOutsideClick: false,
            allowEscapeKey: false,
            didOpen: () => {
                Swal.showLoading();
            }
        });

        $.ajax({
            url: "{{ url_for('api.check_orphans') }}",
            method: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({
                'changes': entityChanges,
                'entity_type': entity_type,
                'entity_shape': entity_shape
            }),
            success: function(response) {
                // Close loading indicator
                Swal.close();
                
                if (response.status === 'success') {
                    // Se ci sono entità affette e almeno una strategia è ASK
                    if (response.affected_entities.length > 0 && !response.should_delete) {
                        handleAffectedEntities(
                            response.affected_entities,
                            response.orphan_strategy,
                            response.proxy_strategy,
                            successCallback
                        );
                    } else {
                        // Altrimenti procedi direttamente
                        successCallback(response.affected_entities, response.should_delete);
                    }
                }
            },
            error: function(jqXHR) {
                // Close loading indicator
                Swal.close();
                
                let response = $.parseJSON(jqXHR.responseText);
                let errorMessage = response && response.message ? 
                    response.message : 
                     "{{_('An unexpected error occurred!')}}";
                showErrorMessage(errorMessage, response.error_type);
            }
        });
    }

    function applyChangesToEntity(changes, successCallback, errorCallback) {
        // Show loading indicator
        Swal.fire({
            title: "{{ _('Processing...') }}",
            html: "{{ _('Applying changes to the entity. Please wait...') }}",
            allowOutsideClick: false,
            allowEscapeKey: false,
            didOpen: () => {
                Swal.showLoading();
            }
        });

        $.ajax({
            url: "{{ url_for('api.apply_changes') }}",
            method: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(changes),
            success: function(response) {
                // Close loading indicator
                Swal.close();
                
                if (response.status === "success") {
                    Swal.fire({
                        icon: 'success',
                        title: "{{ _('Success') }}",
                        text: response.message,
                        confirmButtonColor: '#3085d6'
                    }).then(() => {
                        if (successCallback) {
                            successCallback(response);
                        } else {
                            // Default behavior: reload current page
                            window.location.reload();
                        }
                    });
                } else {
                    showErrorMessage(response.message, response.error_type);
                }
            },
            error: function(jqXHR) {
                // Close loading indicator
                Swal.close();
                
                let response = $.parseJSON(jqXHR.responseText);
                let errorMessage = response && response.message ? 
                    response.message : 
                    "{{ _('An unexpected error occurred!') }}";
                
                showErrorMessage(errorMessage, response.error_type);

                if (errorCallback) {
                    errorCallback(response);
                }
            }
        });
    }

    function showErrorMessage(message, errorType) {
        if (errorType === 'validation') {
            // For validation errors, use html option to properly render HTML tags
            Swal.fire({
                icon: 'error',
                title: "{{ _('Validation Error') }}",
                html: message,
                confirmButtonColor: '#d33'
            });
        } else {
            // For system errors or unspecified errors, use text option
            Swal.fire({
                icon: 'error',
                title: "{{ _('Error') }}",
                text: message,
                confirmButtonColor: '#d33'
            });
        }
    }

    function toggleEditForm(listItem) {
        const form = listItem.find('.edit-form');
        const valueSpan = listItem.find('.object-value');
        form.toggleClass('d-none');
        valueSpan.toggleClass('d-none');
    }

    function showAddFormOrAlert() {
        can_be_added = {{ can_be_added|tojson|safe }}
        if (can_be_added == null) {
            $(`.add-form`).toggleClass('d-none');
        } else {
            if (can_be_added.length == 0) {
                Swal.fire({
                    title: "{{ _('Warning') }}",
                    text: "{{ _('You cannot add more properties; the limit for each property has been reached') }}",
                    icon: 'warning',
                    confirmButtonColor: '#3085d6'
                });
            } else {
                $(`.add-form`).toggleClass('d-none');
            }
        }
    }

    function updateObjectInput() {
        if (!{{shacl|tojson|safe}}) {
            $('.object-input-text').show();
            $('.object-input').prop('disabled', true);
            return
        }
        const selectedPredicate = $('.predicate-select').val();
        if (optional_values[selectedPredicate] && optional_values[selectedPredicate].length > 0) {
            $('.object-input-text').hide().prop('disabled', true);
            $('.object-input').show().prop('disabled', false).find('option').hide().filter(`[data-predicate="${selectedPredicate}"]`).show();
        } else {
            $('.object-input').hide().prop('disabled', true);
            $('.object-input-text').show().prop('disabled', false);
        }
    }

    function restoreOriginalValues() {
        $('.editable-field, .editable-select, .date-type-selector, .date-input').each(function() {
            var originalValue = $(this).data('original-value');
            if (originalValue !== undefined) {
                $(this).val(originalValue);
            }
        });

        // Aggiorna la visualizzazione dei campi data
        $('.date-input-group').each(function() {
            var dateInputGroup = $(this);
            var dateTypeSelector = dateInputGroup.find('.date-type-selector');
            var selectedDateType = dateTypeSelector.val();

            // Mostra l'input data appropriato
            showAppropriateDateInput(dateTypeSelector);

            // Aggiorna la visualizzazione della data
            var dateInput = dateInputGroup.find(`.date-input[data-date-type="${selectedDateType}"]`);
            var dateDisplay = dateInputGroup.find('.date-display');
            dateDisplay.text(dateInput.val());
        });

        $('.added-in-edit-mode').remove();
        
        customPropertiesManager.reset();

        // Ripristina l'ordine originale degli elementi
        $('[data-repeater-list][data-ordered-by]').each(function() {
            var list = $(this);
            var listId = list.data('repeater-list');
            var originalListOrder = originalOrder[listId];

            if (originalListOrder) {
                var addButton = list.children('[data-repeater-create]').detach();

                var items = list.find('[data-repeater-item].draggable').not('.repeater-template');
                items.sort(function(a, b) {
                    var aId = $(a).data('old-object-id');
                    var bId = $(b).data('old-object-id');
                    return originalListOrder.indexOf(aId) - originalListOrder.indexOf(bId);
                });
                list.append(items);
                list.append(addButton);
            }
        });

        originalOrder = {};

        // Ripristina gli elementi contrassegnati per la cancellazione
        $('.marked-for-deletion').each(function() {
            var listItem = $(this);
            
            // Remove strikethrough only from the value display elements, excluding date
            listItem.find('.draggable-entity-link, .select-value-display, .textarea-display-container .textarea-display, input.editable-field:not(.date-input)').removeClass('striked');
            
            listItem.find('.editable-field').prop('readonly', false);
            listItem.find('.editable-select').prop('disabled', false);
            listItem.find('.undo-delete-button').remove();
            listItem.find('.delete-button').show();
            listItem.removeClass('marked-for-deletion');

            // Ripristina il dateInputGroup se applicabile
            const dateInputGroup = listItem.find('.date-input-group');
            toggleDateStrike(dateInputGroup, false);
        });
    }

    function toggleDateStrike(dateInputGroup, isStriked) {
        const dateDisplayContainer = dateInputGroup.find('.date-display-container');
        const dateInputContainer = dateInputGroup.find('.date-input-container');
        const dateTypeSelectorContainer = dateInputGroup.find('.date-type-selector-container');

        if (isStriked) {
            // Nascondi gli input della data e il selettore del tipo di data
            dateInputContainer.hide();
            dateTypeSelectorContainer.hide();

            // Mostra il date-display-container e applica la classe 'striked'
            dateDisplayContainer.show();
            dateDisplayContainer.find('.date-display').addClass('striked');
        } else {
            // Mostra gli input della data e il selettore del tipo di data
            dateInputContainer.show();
            dateTypeSelectorContainer.show();

            // Nascondi il date-display-container e rimuovi la classe 'striked'
            dateDisplayContainer.hide();
            dateDisplayContainer.find('.date-display').removeClass('striked');
        }
    }

    function collectNewProperties() {
        var subject = '{{ subject }}';

        var structuredData = {
            entity_type: '{{ entity_type }}',
            properties: {}
        };

        // Clear pendingChanges before collecting new properties to avoid duplications
        pendingChanges = pendingChanges.filter(change => change.action !== 'create');
        
        collectFormData($('.triples'), structuredData.properties, shacl, 0);

        const customProperties = customPropertiesManager.collectCustomProperties();
        Object.assign(structuredData.properties, customProperties);

        Object.keys(structuredData.properties).forEach(function (predicate) {
            structuredData.properties[predicate].forEach(function (property) {
                if (property.orderedBy) {
                    // Create the new order array
                    var newOrder = [];
                    var shape = property.shape || '';

                    // Iterate through the elements in the repeater list and collect their IDs or values
                    $('[data-repeater-list]').find('[data-repeater-item]').each(function () {
                        $item = $(this)
                        if ($item.data('shape') == shape) {
                            var objectId = $item.data('old-object-id');
                            var tempId = $item.data('temp-id');
                            if (objectId) {
                                newOrder.push(objectId);
                            } else if (tempId) {
                                newOrder.push(tempId);
                            }
                        }
                    });

                    var existingOrderIndex = pendingChanges.findIndex(function(change) {
                        return change.action === 'order' && 
                            change.subject === subject && 
                            change.predicate === predicate &&
                            change.shape === shape;
                    });

                    if (existingOrderIndex !== -1) {
                        // Update the existing order action
                        pendingChanges[existingOrderIndex].object = newOrder;
                    } else {
                        // Add a new order action
                        storePendingChange('order', subject, predicate, newOrder, property.orderedBy, shape, entity_type);
                    }
                }
            });
        });
        
        if (Object.keys(structuredData.properties).length > 0) {
            pendingChanges.push({
                action: 'create',
                subject: subject,
                data: structuredData
            });
        }
    }

    let customPropertiesManager;

    $(document).ready(function () {
        $('[data-repeater-create]').addClass('d-none');         

        $('.edit-button').click(function () {
            const isRedirect = $(this).find('i').hasClass('bi-arrow-right-square');
            if (isRedirect) {
                pass
            } else {
                toggleEditForm($(this).closest('.property-value'));
            }
        });

        $('#editEntityBtn').click(function() {
            var buttonText = $(this).text().trim();
            var cancelEditingText = '{{ _("Cancel Editing") }}';
            var isCurrentlyInEditMode = buttonText === cancelEditingText;
            
            if (!isCurrentlyInEditMode) {
                // Entering edit mode
                $('.custom-properties-section').css('display', 'block');
            } else {
                // Exiting edit mode
                $('.custom-properties-section').css('display', 'none');
                customPropertiesManager.reset();
                restoreOriginalValues();
            }
        });
    
        customPropertiesManager = new CustomPropertiesManager();

        $('.cancel-button').click(function () {
            toggleEditForm($(this).closest('.property-value'));
            toggleEditForm($(this).closest('form'));
        });
        $('.add-button').click(function() {
            showAddFormOrAlert();
            updateObjectInput();
        });
        $('.cancel-add-button').click(function() {
            $('.add-form').addClass('d-none');
        });
        $('.predicate-select').change(updateObjectInput);

        $('#cancelChangesBtn').click(function(){
            $('#editEntityBtn').click();
        });

        $(document).on('change', '.editable-field[id^="new_value_"], .editable-select, .date-type-selector', function() {
            const listItem = $(this).closest('.property-value');
            const subject = listItem.data('subject-id');
            const predicate = listItem.data('property-id');
            const oldObject = listItem.data('old-object-id');
            const shape = listItem.data('shape');

            let newObject;

            if ($(this).hasClass('date-type-selector')) {
                const selectedType = $(this).val();
                newObject = listItem.find(`#new_value_${$(this).attr('id').replace('_date_type', '')}_${selectedType}`).val();
            } else {
                newObject = $(this).val();
            }

            storePendingChange('update', subject, predicate, oldObject, newObject, shape, entity_type);
        });

        $(document).on('click', '.delete-button', function() {
            const listItem = $(this).closest('.property-value');
            listItem.addClass('marked-for-deletion');
            const dateInputGroup = listItem.find('.date-input-group');
            toggleDateStrike(dateInputGroup, true);
            const subject = listItem.data('subject-id');
            const predicate = listItem.data('property-id');
            const object_value = listItem.data('old-object-id');
            const shape = listItem.data('shape');
            const orderedBy = listItem.data('ordered_by');
            
            // Apply strikethrough only to the value display elements, excluding date (handled by toggleDateStrike)
            listItem.find('.draggable-entity-link, .select-value-display, .textarea-display-container .textarea-display, input.editable-field:not(.date-input)').addClass('striked');
            
            listItem.find('.editable-field').prop('readonly', true);
            listItem.find('.editable-select').prop('disabled', true);
            $(this).hide();
            
            // Aggiungi l'azione di cancellazione
            storePendingChange('delete', subject, predicate, object_value, null, shape, entity_type);
            
            // Se l'elemento fa parte di una lista ordinata, aggiorna l'ordine
            if (orderedBy) {
                // Trova tutti gli elementi della stessa lista ordinata (stesso predicato e shape)
                const list = $(`[data-property-id="${predicate}"][data-shape="${shape || ''}"]`).not('.marked-for-deletion');
                
                // Crea un nuovo array di ordine escludendo l'elemento cancellato
                const newOrder = [];
                list.each(function() {
                    const itemId = $(this).data('old-object-id');
                    if (itemId && itemId !== object_value) {
                        newOrder.push(itemId);
                    }
                });
                
                // Cerca un'azione di ordinamento esistente per questo predicato e forma
                let existingOrderIndex = pendingChanges.findIndex(change => 
                    change.action === 'order' && 
                    change.subject === subject && 
                    change.predicate === predicate &&
                    change.shape === shape
                );

                if (existingOrderIndex !== -1) {
                    // Aggiorna l'ordine esistente
                    pendingChanges[existingOrderIndex].object = newOrder;
                } else {
                    // Aggiungi una nuova azione di ordinamento
                    storePendingChange('order', subject, predicate, newOrder, orderedBy, shape, entity_type);
                }
            }
            
            const undoButton = $('<button>')
                .addClass('btn btn-sm btn-outline-primary undo-delete-button ms-0 ms-sm-2')
                .attr('title', '{{ _("Undo delete") }}')
                .html('<i class="bi bi-arrow-counterclockwise me-1"></i> {{ _("Revert") }}')
                .insertAfter($(this));
                
                undoButton.click(function() {
                    // Remove strikethrough only from the value display elements, excluding date
                    listItem.find('.draggable-entity-link, .select-value-display, .textarea-display-container .textarea-display, input.editable-field:not(.date-input)').removeClass('striked');
                    
                    listItem.find('.editable-field').prop('readonly', false);
                    listItem.find('.editable-select').prop('disabled', false);
                    $(this).siblings('.delete-button').show();
                    $(this).hide();
                    
                    // Rimuovi l'azione di cancellazione
                    const index = pendingChanges.findIndex(change => 
                        change.action === 'delete' && 
                        change.subject === subject && 
                        change.predicate === predicate && 
                        change.object === object_value
                    );
                    if (index > -1) {
                        pendingChanges.splice(index, 1);
                    }
                    
                    // Se l'elemento fa parte di una lista ordinata, aggiorna l'ordine
                    if (orderedBy) {
                        // Trova tutti gli elementi della stessa lista ordinata (stesso predicato e shape)
                        const list = $(`[data-property-id="${predicate}"][data-shape="${shape || ''}"]`).not('.marked-for-deletion');
                        
                        // Crea un nuovo array di ordine includendo l'elemento ripristinato
                        const newOrder = [];
                        list.each(function() {
                            const itemId = $(this).data('old-object-id');
                            if (itemId) {
                                newOrder.push(itemId);
                            }
                        });
                        newOrder.push(object_value);
                        
                        // Cerca un'azione di ordinamento esistente per questo predicato e forma
                        let existingOrderIndex = pendingChanges.findIndex(change => 
                            change.action === 'order' && 
                            change.subject === subject && 
                            change.predicate === predicate &&
                            change.shape === shape
                        );

                        if (existingOrderIndex !== -1) {
                            // Aggiorna l'ordine esistente
                            pendingChanges[existingOrderIndex].object = newOrder;
                        } else {
                            // Aggiungi una nuova azione di ordinamento
                            storePendingChange('order', subject, predicate, newOrder, orderedBy, shape, entity_type);
                        }
                    }
                    
                    const dateInputGroup = listItem.find('.date-input-group');
                    toggleDateStrike(dateInputGroup, false);
                    listItem.removeClass('marked-for-deletion');
                });
        });

        $(document).on('click', '#deleteEntityBtn', function() {
            Swal.fire({
                title: "{{_('Are you sure?')}}",
                html: `<p>{{_('This will delete this resource and all its data')}}</p>
                    <p>{{_('You can still restore it later using the Time Machine')}}</p>`,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#d33',
                cancelButtonColor: '#3085d6',
                confirmButtonText: "{{_('Yes, delete it!')}}",
                cancelButtonText: "{{_('Cancel')}}"
            }).then((result) => {
                if (result.isConfirmed) {
                    const changes = [{
                        action: "delete",
                        subject: subject
                    }];

                    processOrphanCheck(changes, entity_type, entity_shape, function(affectedEntities, shouldDelete) {
                        const finalChanges = [{
                            action: "delete",
                            subject: subject,
                            affected_entities: affectedEntities,
                            delete_affected: shouldDelete
                        }];

                        applyChangesToEntity(finalChanges, function() {
                            window.location.href = "{{ url_for('main.catalogue') }}";
                        });
                    });
                }
            });
        });

        $('#saveChangesBtn').click(function() {
            let errors = [];

            validateRequiredFields(errors);
            validateUrls(errors);
            validateDatatypes(errors);
            validateConditions(errors);
            validateCardinality(errors);

            if (errors.length > 0) {
                displayValidationErrors(errors);                
                return;
            }

            collectNewProperties();

            if (pendingChanges.length === 0) {
                Swal.fire({
                    icon: 'warning',
                    title: "{{_('No Changes Detected')}}",
                    text: "{{_('Oops! It looks like you have not made any changes yet. Try updating a field first')}}",
                    confirmButtonColor: '#3085d6'
                });
                return;
            }
            
            processOrphanCheck(pendingChanges, entity_type, entity_shape, function(affectedEntities, shouldDelete) {
                // Aggiorna il primo elemento di pendingChanges con le informazioni sulle entità affette
                if (affectedEntities && affectedEntities.length > 0) {
                    pendingChanges[0].affected_entities = affectedEntities;
                    pendingChanges[0].delete_affected = shouldDelete;
                }
                
                // Use the new primary source dialog
                showPrimarySourceDialog({
                    defaultPrimarySource: default_primary_source,
                    formatSourceApiUrl: format_source_api_url,
                    onConfirm: function(primarySourceUrl, saveAsDefault) {
                        // Add primary source information to the first change
                        if (pendingChanges.length > 0) {
                            pendingChanges[0].primary_source = primarySourceUrl;
                            pendingChanges[0].save_default_source = saveAsDefault;
                        }
                        
                        applyChangesToEntity(pendingChanges, function() {
                            window.location.href = "{{ url_for('entity.about', subject=subject) }}";
                        });
                    }
                });
            });
        });

        $(document).on('change', '.date-input', function() {
            $(this).closest('.date-input-group').find('.date-display').text($(this).val());
        });
   });
</script>

{% endblock %}