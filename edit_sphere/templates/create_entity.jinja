{% macro render_form_field(entity_type, prop, details, entity_types, prefix, form_fields, counter=1, depth=0, max_depth=5) %}
    {% if depth <= max_depth %}
        {% set unique_id_base = (prefix + entity_type | human_readable_predicate(entity_types, False) | replace(" ", "_") + "_" + prop | human_readable_predicate(entity_types, False) | replace(" ", "_") + "_" + counter | string) %}

        <div data-repeater-list="{{ unique_id_base }}" data-counter="{{ counter }}" data-max-items="{{ details.max }}">
            <div data-repeater-item class="input-group mb-3" style="position: relative;">
                {% if details.intermediateRelation %}
                    <div class="d-flex flex-column">
                        <div class="nested-form-header mb-4">
                            <h6>{{ prop | human_readable_predicate(entity_types, False) }}</h6>
                            <button class="btn btn-outline-secondary btn-sm toggle-btn" type="button" data-bs-toggle="collapse" data-bs-target="#{{ unique_id_base }}_nested_form" aria-expanded="false" aria-controls="{{ unique_id_base }}_nested_form">
                                <span id="{{ unique_id_base }}_toggle_icon" class="bi bi-chevron-right"></span>
                            </button>
                        </div>
                        <div id="{{ unique_id_base }}_nested_form" class="nested-form-container collapse">
                            {% for inter_prop, inter_details in form_fields[details.intermediateRelation.targetEntityType].items() %}
                                {{ render_form_field(details.intermediateRelation.targetEntityType, inter_prop, inter_details, entity_types, unique_id_base + '_', form_fields, counter, depth + 1, max_depth) }}
                            {% endfor %}
                        </div>
                    </div>
                {% elif details.objectClass and details.objectClass in entity_types %}
                    <div class="d-flex flex-column">
                        <div class="nested-form-header mb-4">
                            <h6>{{ prop | human_readable_predicate(entity_types, False) }}</h6>
                            <button class="btn btn-outline-secondary btn-sm toggle-btn" type="button" data-bs-toggle="collapse" data-bs-target="#{{ unique_id_base }}_nested_form" aria-expanded="false" aria-controls="{{ unique_id_base }}_nested_form">
                                <span id="{{ unique_id_base }}_toggle_icon" class="bi bi-chevron-right"></span>
                            </button>
                        </div>
                        <div id="{{ unique_id_base }}_nested_form" class="nested-form-container collapse">
                            {% for nested_prop, nested_details in form_fields[details.objectClass].items() %}
                                {{ render_form_field(details.objectClass, nested_prop, nested_details, entity_types, unique_id_base + '_', form_fields, counter, depth + 1, max_depth) }}
                            {% endfor %}
                        </div>
                    </div>
                {% elif details.optionalValues and details.optionalValues|length %}
                    <div class="form-floating flex-grow-1">
                        <select class="form-select" id="{{ unique_id_base }}" name="{{ unique_id_base }}">
                            {% for val in details.optionalValues %}
                                <option value="{{ val }}">{{ val | human_readable_predicate(entity_types, False) }}</option>
                            {% endfor %}
                        </select>
                        <label for="{{ unique_id_base }}" class="input-group-select">{{ prop | human_readable_predicate(entity_types, False) }}</label>
                    </div>
                {% else %}
                    <div class="form-floating flex-grow-1">
                        <input type="text" class="form-control" id="{{ unique_id_base }}" name="{{ unique_id_base }}" placeholder="{{ prop | human_readable_predicate(entity_types, False) }}" {{ 'required' if details.min and details.min > 0 }}>
                        <label for="{{ unique_id_base }}">{{ prop | human_readable_predicate(entity_types, False) }}</label>
                    </div>
                {% endif %}
                {% if not details.max or details.max > 1 %}
                    <button data-repeater-delete type="button" class="repeater-delete-btn">
                        <i class="bi bi-x"></i>
                    </button>
                {% endif %}
            </div>
            {% if not details.max or details.max > 1 %}
                <div class="mb-3 text-start" data-repeater-create>
                    <button type="button" class="btn btn-link text-secondary">{{ _("Add another %(element_type)s", element_type=prop | human_readable_predicate(entity_types, False)) }}</button>
                </div>
            {% endif %}
        </div>
    {% endif %}
{% endmacro %}

{% extends "_base.jinja" %}
{% block content %}

<style>
    .nested-form-container {
        border-left: .2rem solid #eee;
        padding-left: 1rem;
        margin-left: 1rem;
        position: relative;
    }

    .repeater-delete-btn {
        position: absolute;
        top: 0.5rem;
        right: 0.5rem;
        background-color: transparent;
        border: 1px solid #dc3545;
        border-radius: 1rem;
        color: #dc3545;
        font-size: 1.2rem;
        cursor: pointer;
        padding: 0.3rem 0.6rem;
        transition: background-color 0.2s, color 0.2s, border 0.2s;
    }

    .repeater-delete-btn:hover {
        background-color: #dc3545;
        color: #fff;
        border-color: #dc3545;
    }

    .input-group {
        position: relative;
    }
</style>

<div class="container mt-5">
    <h2 class="mb-4">{{ _('Add New Record') }}</h2>

    <form action="{{ url_for('create_entity') }}" method="post" id="entityForm">

        <div class="form-floating mb-3">
            <select class="form-select" id="entity_type" name="entity_type">
                <option value="" disabled selected>{{_('Select an entity type')}}</option>
                {% for entity_type in entity_types %}
                    <option value="{{ entity_type | human_readable_predicate(entity_types, False) | replace(' ', '_') }}">{{ entity_type | human_readable_predicate(entity_types, False) }}</option>
                {% endfor %}
            </select>
            <label for="entity_type" class="form-label">{{_('Select an entity type')}}</label>
        </div>

        {% for entity_type, properties in form_fields.items() %}
            {% set group_id = (entity_type | human_readable_predicate(entity_types, False) + "_group") | replace(" ", "_") %}
            <div class="property-group mb-3" id="{{ group_id }}" style="display:none">
                {% for prop, details in properties.items() %}
                    {{ render_form_field(entity_type, prop, details, entity_types, '', form_fields) }}
                {% endfor %}
            </div>
        {% endfor %}

        <div class="mb-3">
            <input type="submit" value="Create" class="btn btn-primary">
        </div>

    </form>

    <script>
        function generateUniqueId(prefix) {
            return prefix + '_' + Math.random().toString(36).substr(2, 9);
        }

        function updateRemoveButtons(list) {
            list.find('[data-repeater-item]').each(function(index) {
                if (index === 0) {
                    $(this).find('.repeater-delete-btn').hide();
                } else {
                    $(this).find('.repeater-delete-btn').show();
                }
            });
        }

        function updateAddButton(list) {
            var maxItems = parseInt(list.data('max-items')) || Infinity;
            var counter = list.find('[data-repeater-item]').length;
            var addButton = list.find('[data-repeater-create]').first();
            if (counter >= maxItems) {
                addButton.hide();
            } else {
                addButton.show();
            }
        }

        function updateNestedIds(container) {
            container.find('[data-bs-toggle="collapse"]').each(function() {
                var toggleButton = $(this);
                var nestedContainer = toggleButton.closest('.nested-form-header').next('.nested-form-container');
                
                var newId = generateUniqueId('nested_form');
                toggleButton.attr('data-bs-target', '#' + newId);
                toggleButton.attr('aria-controls', newId);
                nestedContainer.attr('id', newId);
            });
        }

        $(document).ready(function(){
            // Store initial copies of repeater items
            var initialCopies = {};

            $('[data-repeater-list]').each(function() {
                var list = $(this);
                var firstItem = list.find('[data-repeater-item]').first();
                initialCopies[list.data('repeater-list')] = firstItem.clone(true, true);
            });

            $('#entity_type').change(function(){
                let selectedType = $(this).val().replace(" ", "_");
                $('.property-group').hide();
                $(`#${selectedType}_group`).show();
            });

            $(document).on('click', '.toggle-btn', function() {
                let target = $(this).attr('data-bs-target');
                $(target).collapse('toggle');
            });

            function bindRepeaterEvents(context) {
                context.find('[data-repeater-create]').off('click').on('click', function(){
                    var list = $(this).closest('[data-repeater-list]');
                    var maxItems = parseInt(list.data('max-items')) || Infinity;
                    var counter = list.find('[data-repeater-item]').length;
                    if (counter < maxItems) {
                        // Clone the initial copy for this list
                        var newItem = initialCopies[list.data('repeater-list')].clone(true, true);

                        // Reset values and nested elements
                        newItem.find('input, select').val('');
                        newItem.find('.nested-form-container').removeClass('show');

                        // Update IDs and names
                        newItem.find('input, select').each(function(){
                            var newId = generateUniqueId($(this).attr('id').replace(/_[a-zA-Z0-9]+$/, ''));
                            $(this).attr('id', newId);
                            $(this).attr('name', newId);
                        });
                        newItem.find('label').each(function(){
                            var newFor = $(this).attr('for').replace(/_[a-zA-Z0-9]+$/, '');
                            var newId = newItem.find('#' + newFor).attr('id');
                            $(this).attr('for', newId);
                        });

                        // Update nested IDs
                        updateNestedIds(newItem);

                        // Append the new item within its level
                        newItem.appendTo(list);
                        list.children('[data-repeater-create]').appendTo(list);
                        updateRemoveButtons(list);
                        updateAddButton(list);

                        // Re-bind events for newly added items
                        bindRepeaterEvents(newItem);
                    }
                });

                context.find('[data-repeater-delete]').off('click').on('click', function(){
                    var list = $(this).closest('[data-repeater-list]');
                    $(this).closest('[data-repeater-item]').remove();
                    updateRemoveButtons(list);
                    updateAddButton(list);
                });
            }

            bindRepeaterEvents($(document));
        });
    </script>
</div>

{% endblock %}