{% macro render_form_field(entity_type, prop, details, entity_types, prefix, form_fields, counter=1, depth=0, max_depth=5) %}
    {% if depth <= max_depth %}
        {% set unique_id_base = (prefix + entity_type | human_readable_predicate(entity_types, False) | replace(" ", "_") + "_" + prop | human_readable_predicate(entity_types, False) | replace(" ", "_") + "_" + counter | string) %}

        <div data-repeater-list="{{ unique_id_base }}" data-class="{{ details.entityType }}" data-counter="{{ counter }}" data-max-items="{{ details.max }}"
             {% if details.orderedBy %}data-ordered-by="{{ details.orderedBy }}"{% endif %}>
            <div data-repeater-item class="input-group mb-3" style="position: relative; padding-right: 3.5rem;" data-predicate-uri="{{ details.uri }}" data-depth="{{ depth }}"
                {% if details.intermediateRelation %}
                    data-intermediate-relation="{{ details.intermediateRelation.class }}"
                    data-connecting-property="{{ details.intermediateRelation.connectingProperty }}"
                {% endif %}
                {% if details.additionalProperties %}
                    data-additional-properties='{{ details.additionalProperties | tojson }}'
                {% endif %}>
                <div class="d-flex align-items-center w-100 mb-2">
                    {% if details.orderedBy %}
                        <span class="drag-handle me-2" style="cursor: move;">☰</span>
                    {% endif %}
                    <h6 class="mb-0 flex-grow-1">{{ details.displayName or (prop | human_readable_predicate(entity_types, False)) }}</h6>
                </div>
                {% if details.intermediateRelation %}
                    <div class="d-flex flex-column">
                        <div class="nested-form-header mb-4">
                            <button class="btn btn-outline-secondary btn-sm toggle-btn" type="button" data-bs-toggle="collapse" data-bs-target="#{{ unique_id_base }}_nested_form" aria-expanded="false" aria-controls="{{ unique_id_base }}_nested_form">
                                <span id="{{ unique_id_base }}_toggle_icon" class="bi bi-chevron-right"></span>
                            </button>
                        </div>
                        <div id="{{ unique_id_base }}_nested_form" class="nested-form-container collapse" data-object-class="{{ details.intermediateRelation.targetEntityType }}">
                            {% for inter_prop, inter_details in details.intermediateRelation.properties.items() %}
                                {{ render_form_field(details.intermediateRelation.targetEntityType, inter_prop, inter_details, entity_types, unique_id_base + '_', form_fields, counter, depth + 1, max_depth) }}
                            {% endfor %}
                        </div>
                    </div>
                {% elif details.objectClass and details.objectClass in entity_types %}
                    <div class="d-flex flex-column">
                        <div class="nested-form-header mb-4">
                            <button class="btn btn-outline-secondary btn-sm toggle-btn" type="button" data-bs-toggle="collapse" data-bs-target="#{{ unique_id_base }}_nested_form" aria-expanded="false" aria-controls="{{ unique_id_base }}_nested_form">
                                <span id="{{ unique_id_base }}_toggle_icon" class="bi bi-chevron-right"></span>
                            </button>
                        </div>
                        <div id="{{ unique_id_base }}_nested_form" class="nested-form-container collapse" data-object-class="{{ details.objectClass }}">
                            {% for nested_prop, nested_details in form_fields[details.objectClass].items() %}
                                {{ render_form_field(details.objectClass, nested_prop, nested_details, entity_types, unique_id_base + '_', form_fields, counter, depth + 1, max_depth) }}
                            {% endfor %}
                        </div>
                    </div>
                {% elif details.optionalValues and details.optionalValues|length %}
                    <div class="form-floating flex-grow-1">
                        <select class="form-select" id="{{ unique_id_base }}" name="{{ unique_id_base }}" data-predicate-uri="{{ details.uri }}">
                            {% for val in details.optionalValues %}
                                <option value="{{ val }}">{{ val | human_readable_predicate(entity_types, False) }}</option>
                            {% endfor %}
                        </select>
                        <label for="{{ unique_id_base }}" class="input-group-select">{{ details.displayName or (prop | human_readable_predicate(entity_types, False)) }}</label>
                    </div>
                {% else %}
                    <div class="form-floating flex-grow-1">
                        <input type="text" class="form-control" id="{{ unique_id_base }}" name="{{ unique_id_base }}" data-predicate-uri="{{ details.uri }}" placeholder="{{ prop | human_readable_predicate(entity_types, False) }}" {{ 'required' if depth == 0 and details.min and details.min > 0 }}>
                        <label for="{{ unique_id_base }}">{{ details.displayName or (prop | human_readable_predicate(entity_types, False)) }}</label>
                    </div>
                {% endif %}
                {% if not details.max or details.max > 1 %}
                    <button data-repeater-delete type="button" class="repeater-delete-btn">
                        <i class="bi bi-x"></i>
                    </button>
                {% endif %}
            </div>
            {% if not details.max or details.max > 1 %}
                <div class="mb-3 text-start" data-repeater-create>
                    <button type="button" class="btn btn-link text-secondary">{{ _("Add another %(element_type)s", element_type=details.displayName or (prop | human_readable_predicate(entity_types, False))) }}</button>
                </div>
            {% endif %}
        </div>
    {% endif %}
{% endmacro %}

{% extends "_base.jinja" %}
{% block content %}

<style>
    .nested-form-container {
        border-left: .2rem solid #eee;
        padding-left: 1rem;
        margin-left: 1rem;
        position: relative;
    }

    .repeater-delete-btn {
        position: absolute;
        top: 0.5rem;
        right: 0.5rem;
        background-color: transparent;
        border: 1px solid #dc3545;
        color: #dc3545;
        font-size: 1.2rem;
        cursor: pointer;
        transition: background-color 0.2s, color 0.2s, border 0.2s;
    }

    .repeater-delete-btn:hover {
        background-color: #dc3545;
        color: #fff;
        border-color: #dc3545;
    }

    .input-group {
        position: relative;
        padding-right: 3.5rem; /* Adjusted padding to make space for delete button */
    }

    .nested-form-header .toggle-btn.collapsed {
        transform: rotate(0deg);
    }

    .nested-form-header .toggle-btn:not(.collapsed) {
        transform: rotate(90deg);
    }

    [data-repeater-list], #entity_type {
        margin-bottom: 3rem;
    }

    [data-repeater-create] {
        margin-top: -1rem; /* Sposta il pulsante "Add another" più vicino all'elemento sopra */
    }
</style>

<div class="container mt-5">
    <h2 class="mb-4">{{ _('Add New Record') }}</h2>

    {% with messages = get_flashed_messages(with_categories=true) %}
    {% if messages %}
        <div class="alert-messages mt-4">
        {% for category, message in messages %}
            <div class="alert alert-{{ category }} alert-dismissible fade show" role="alert">
            {{ message }}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        {% endfor %}
        </div>
    {% endif %}
    {% endwith %}

    <form action="{{ url_for('create_entity') }}" method="post" id="entityForm">
        <input type="hidden" name="structured_data" id="structured_data">
        {% if shacl %}
            <div class="form-floating mb-3">
                <select class="form-select" id="entity_type" name="entity_type">
                    <option value="" disabled selected>{{_('Select an entity type')}}</option>
                    {% for entity_type in entity_types %}
                        <option value="{{ entity_type }}" data-uri="{{ entity_type }}">{{ entity_type | human_readable_predicate(entity_types, False) }}</option>
                    {% endfor %}
                </select>
                <label for="entity_type" class="form-label">{{_('Select an entity type')}}</label>
            </div>

            {% for entity_type, properties in form_fields.items() %}
                {% set group_id = (entity_type | human_readable_predicate(entity_types, False) + "_group") | replace(" ", "_") %}
                <div class="property-group mb-3" id="{{ group_id }}" data-uri="{{ entity_type }}" style="display:none">
                    {% for prop, details in properties.items() %}
                        {{ render_form_field(entity_type, prop, details, entity_types, '', form_fields) }}
                    {% endfor %}
                </div>
            {% endfor %}
        {% else %}
            <div id="custom-entity-form">
                <div id="custom-properties">
                    <div class="mb-3 custom-property" data-property-id="1">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <label for="custom_property_1" class="form-label mb-0">{{_('Property')}} 1</label>
                            <button type="button" class="btn btn-danger btn-sm remove-property" data-property-id="1">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                        <input type="url" class="form-control mb-2" id="custom_property_1" name="custom_property_1" placeholder="{{ _('Property URI') }}" required>
                        <div class="invalid-feedback mb-2">{{_('Please enter a valid URL for the property URI')}}</div>

                        <!-- Input per il valore (gestito dinamicamente in JS) -->
                        <input type="text" class="form-control custom-value-input mb-2" id="custom_value_1" name="custom_value_1" placeholder="{{ _('Value') }}">

                        <!-- Selettore per URI o Literal -->
                        <div class="mb-2">
                            <label for="custom_value_type_1" class="form-label">{{ _('Value Type') }}</label>
                            <select class="form-select custom-value-type" id="custom_value_type_1" name="custom_value_type_1">
                                <option value="literal">{{ _('Literal') }}</option>
                                <option value="uri">{{ _('URI') }}</option>
                            </select>
                        </div>

                        <!-- Dropdown per selezionare il datatype (mostrato solo per Literal) -->
                        <div class="mt-2 custom-datatype-section" id="custom_datatype_section_1">
                            <label for="custom_datatype_1" class="form-label">{{ _('Select Datatype') }}</label>
                            <select class="form-select" id="custom_datatype_1" name="custom_datatype_1">
                                {% for label, uri in datatype_options.items() %}
                                    <option value="{{ uri }}">{{ label }}</option>
                                {% endfor %}
                            </select>
                        </div>
                    </div>
                </div>
                <button type="button" id="add-property" class="btn btn-secondary mb-3">{{_('Add Property')}}</button>
            </div>
        {% endif %}
        <div class="mb-3">
            <input type="submit" value="{{ _('Create') }}" class="btn btn-primary">
        </div>

    </form>

    <script>
        $(document).ready(function() {

            function validateUrlInput(inputElement) {
                if (inputElement[0].checkValidity() === false) {
                    inputElement.addClass('is-invalid');
                } else {
                    inputElement.removeClass('is-invalid');
                }
            }

            // Funzione per validare il valore in tempo reale con AJAX
            function validateValue(propertyId, value) {
                if (!value.trim()) {
                    // Se il valore è vuoto, mostra tutte le opzioni e esci dalla funzione
                    $(`#custom_datatype_${propertyId} option`).show();
                    return;
                }

                $.ajax({
                    url: '{{ url_for("validate_literal") }}',
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify({ value: value }),
                    success: function(response) {
                        var select = $(`#custom_datatype_${propertyId}`);
                        
                        // Nascondi tutte le opzioni prima
                        select.find('option').hide();
                        
                        // Mostra solo le opzioni valide
                        response.valid_datatypes.forEach(function(datatypeUri) {
                            select.find(`option[value="${datatypeUri}"]`).show();
                        });
                        
                        // Se l'opzione attualmente selezionata non è valida, seleziona la prima opzione valida
                        if (!response.valid_datatypes.includes(select.val())) {
                            select.val(response.valid_datatypes[0]);
                        }
                        
                        // Se non ci sono opzioni valide, mostra un messaggio
                        if (response.valid_datatypes.length === 0) {
                            select.append($('<option>', {
                                value: '',
                                text: '{{ _("No valid datatypes for this value") }}',
                                disabled: true,
                                selected: true
                            }));
                        }
                    },
                    error: function(response) {
                        console.error(response.responseJSON.error);
                    }
                });
            }

            function generateUniqueId(prefix) {
                return prefix + '_' + Math.random().toString(36).substr(2, 9);
            }

            function updateRemoveButtons(list) {
                list.find('[data-repeater-item]').each(function(index) {
                    if (index === 0) {
                        $(this).find('.repeater-delete-btn').hide();
                    } else {
                        $(this).find('.repeater-delete-btn').show();
                    }
                });
            }

            function updateAddButton(list) {
                var maxItems = parseInt(list.data('max-items')) || Infinity;
                var counter = list.find('[data-repeater-item]').length;
                var addButton = list.find('[data-repeater-create]').first();
                if (counter >= maxItems) {
                    addButton.hide();
                } else {
                    addButton.show();
                }
            }

            function toggleRemoveButtons() {
                let propertyCount = $('.custom-property').length;
                if (propertyCount === 1) {
                    $('.custom-property .remove-property').hide();
                } else {
                    $('.custom-property .remove-property').show();
                }
            }

            function validateUrl(url) {
                var pattern = new RegExp('^(https?:\\/\\/)?' + // protocol
                    '((([a-z\\d]([a-z\\d-]*[a-z\\d])*)\\.?)+[a-z]{2,}|(\\d{1,3}\\.){3}\\d{1,3})' + // domain name and extension
                    '(\\:\\d+)?(\\/[-a-z\\d%_.~+]*)*' + // port and path
                    '(\\?[;&a-z\\d%_.~+=-]*)?' + // query string
                    '(\\#[-a-z\\d_]*)?$', 'i'); // fragment locator
                return !!pattern.test(url);
            }

            // Function to initialize the form based on the selected entity type
            function initializeForm() {
                let selectedUri = $('#entity_type').val();
                $('#entity_type option').prop('selected', function() {
                    return this.value === selectedUri;
                });
                $('.property-group').hide().find(':input').prop('disabled', true);
                if (selectedUri) {
                    let selectedGroup = $(`.property-group[data-uri="${selectedUri}"]`);
                    selectedGroup.show().find(':input').prop('disabled', false);
                }
            }

            // Store initial copies of repeater items
            var initialCopies = {};

            $('[data-repeater-list]').each(function() {
                var list = $(this);
                var firstItem = list.find('[data-repeater-item]').first();
                initialCopies[list.data('repeater-list')] = firstItem.clone(true, true);

                 // Initialize Sortable for each repeater list
                if (list.data('ordered-by')) {
                    new Sortable(list[0], {
                        handle: '.drag-handle',
                        animation: 150
                    });
                }
            });

            $(window).on('pageshow', function(event) {
                initializeForm();
            });

            initializeForm();       

            // Handle entity type selection
            $('#entity_type').change(function() {
                initializeForm();            
            });

            // Toggle nested forms
            $(document).on('click', '.toggle-btn', function(e) {
                e.stopPropagation();
                let target = $(this).attr('data-bs-target');
                $(target).collapse('toggle');
            });

            function bindRepeaterEvents(context) {
                context.find('[data-repeater-create]').off('click').on('click', function() {
                    var list = $(this).closest('[data-repeater-list]');
                    var maxItems = parseInt(list.data('max-items')) || Infinity;
                    var counter = list.find('[data-repeater-item]').length;
                    if (counter < maxItems) {
                        // Clone the initial copy for this list
                        var newItem = initialCopies[list.data('repeater-list')].clone(true, true);

                        // Reset values and nested elements
                        newItem.find('input, select, textarea').each(function() {
                            var elem = $(this);
                            var elemId = elem.attr('id');
                            
                            if (elemId) {
                                var newId = generateUniqueId(elemId.replace(/_[a-zA-Z0-9]+$/, ''));
                                elem.attr('id', newId);
                                elem.attr('name', newId);
                            }
                            
                            // Reset value
                            if (elem.is('select')) {
                                elem.find('option:first').prop('selected', true);
                            } else {
                                elem.val('');
                            }
                        });

                        // Update nested IDs for collapse elements
                        newItem.find('.nested-form-header').each(function() {
                            var $header = $(this);
                            var $toggleBtn = $header.find('.toggle-btn');
                            var $collapseDiv = $header.next('.nested-form-container');
                            
                            var newId = generateUniqueId('nested_form');
                            $toggleBtn.attr('data-bs-target', '#' + newId);
                            $toggleBtn.attr('aria-controls', newId);
                            $collapseDiv.attr('id', newId);
                            
                            // Re-initialize Bootstrap collapse
                            $collapseDiv.collapse({toggle: false});
                        });

                        // Append the new item within its level
                        newItem.appendTo(list);
                        list.children('[data-repeater-create]').appendTo(list);
                        updateRemoveButtons(list);
                        updateAddButton(list);

                        // Re-bind events for newly added items
                        bindRepeaterEvents(newItem);
                    }
                });

                context.find('[data-repeater-delete]').off('click').on('click', function() {
                    var list = $(this).closest('[data-repeater-list]');
                    $(this).closest('[data-repeater-item]').remove();
                    updateRemoveButtons(list);
                    updateAddButton(list);
                });

                context.find('.collapse').on('shown.bs.collapse', function(e) {
                    e.stopPropagation(); // Prevent the event from bubbling up
                    $(this).prev('.nested-form-header').find('.toggle-btn').removeClass('collapsed');
                });

                context.find('.collapse').on('hidden.bs.collapse', function(e) {
                    e.stopPropagation(); // Prevent the event from bubbling up
                    $(this).prev('.nested-form-header').find('.toggle-btn').addClass('collapsed');
                });

                // Initial state check
                context.find('.collapse').each(function() {
                    if ($(this).hasClass('show')) {
                        $(this).prev('.nested-form-header').find('.toggle-btn').removeClass('collapsed');
                    } else {
                        $(this).prev('.nested-form-header').find('.toggle-btn').addClass('collapsed');
                    }
                });
            }

            // Initialize repeater events
            bindRepeaterEvents($(document));

            // Handle custom entity form
            let propertyCount = 1;

            // Aggiungi nuova proprietà
            $('#add-property').click(function() {
                propertyCount++;
                let newProperty = `
                    <div class="mb-3 custom-property" data-property-id="${propertyCount}">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <label for="custom_property_${propertyCount}" class="form-label mb-0">{{_('Property')}} ${propertyCount}</label>
                            <button type="button" class="btn btn-danger btn-sm remove-property" data-property-id="${propertyCount}">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                        <!-- Input per l'URI della proprietà -->
                        <input type="url" class="form-control mb-2" id="custom_property_${propertyCount}" name="custom_property_${propertyCount}" placeholder="{{ _('Property URI') }}">
                        <div class="invalid-feedback mb-2">{{_('Please enter a valid URL for the property URI')}}</div>

                        <!-- Input per il valore -->
                        <input type="text" class="form-control mb-2 custom-value-input" id="custom_value_${propertyCount}" name="custom_value_${propertyCount}" placeholder="{{ _('Value') }}">

                        <!-- Selettore per URI o Literal -->
                        <div class="mb-2">
                            <label for="custom_value_type_${propertyCount}" class="form-label">{{ _('Value Type') }}</label>
                            <select class="form-select custom-value-type" id="custom_value_type_${propertyCount}" name="custom_value_type_${propertyCount}">
                                <option value="literal">{{ _('Literal') }}</option>
                                <option value="uri">{{ _('URI') }}</option>
                            </select>
                        </div>

                        <!-- Sezione per datatype, mostrata solo se l'utente sceglie Literal -->
                        <div class="mt-2 custom-datatype-section" id="custom_datatype_section_${propertyCount}">
                            <label for="custom_datatype_${propertyCount}" class="form-label">{{ _('Select Datatype') }}</label>
                            <select class="form-select" id="custom_datatype_${propertyCount}" name="custom_datatype_${propertyCount}">
                                {% for label, uri in datatype_options.items() %}
                                    <option value="{{ uri }}">{{ label }}</option>
                                {% endfor %}
                            </select>
                        </div>
                    </div>
                `;
                $('#custom-properties').append(newProperty);
                toggleRemoveButtons();
            });

            // Gestione della rimozione delle proprietà
            $('#custom-properties').on('click', '.remove-property', function() {
                let propertyId = $(this).data('property-id');
                $(`div[data-property-id="${propertyId}"]`).remove();
                updatePropertyLabels();
                toggleRemoveButtons();
            });

            function updatePropertyLabels() {
                $('.custom-property').each(function(index) {
                    let newIndex = index + 1;
                    $(this).attr('data-property-id', newIndex);

                    // Aggiorna l'etichetta della proprietà
                    $(this).find('.form-label').first().text(`{{_('Property')}} ${newIndex}`);

                    // Aggiorna gli attributi di input e select per Property URI, Value e Datatype
                    $(this).find('input, select').each(function() {
                        let oldName = $(this).attr('name');
                        let oldId = $(this).attr('id');
                        let newName = oldName.replace(/\d+/, newIndex);
                        let newId = oldId.replace(/\d+/, newIndex);
                        
                        $(this).attr('name', newName);
                        $(this).attr('id', newId);
                    });

                    // Aggiorna l'attributo `data-property-id` del pulsante di rimozione
                    $(this).find('.remove-property').attr('data-property-id', newIndex);
                });

                // Ricalcola il numero di proprietà attuali
                propertyCount = $('.custom-property').length;
            }

            $(document).on('input', '.custom-value-input', function() {
                var propertyId = $(this).attr('id').split('_').pop();
                var value = $(this).val();
                var valueType = $(`#custom_value_type_${propertyId}`).val();

                // Resetta il datatype su xsd:string ogni volta che il valore cambia
                $(`#custom_datatype_${propertyId}`).val('http://www.w3.org/2001/XMLSchema#string');

                // Chiama validateValue solo se il tipo di valore è 'literal'
                if (valueType === 'literal') {
                    validateValue(propertyId, value);
                }
            });

            // Gestione della visualizzazione dinamica del datatype
            $(document).on('change', '.custom-value-type', function() {
                var propertyId = $(this).attr('id').split('_').pop();
                var selectedValueType = $(this).val();
                var valueInput = $(`#custom_value_${propertyId}`);
                var datatypeSection = $(`#custom_datatype_section_${propertyId}`);
                
                if (selectedValueType === 'literal') {
                    datatypeSection.show();
                    validateValue(propertyId, valueInput.val());
                } else {
                    datatypeSection.hide();
                }
            });
            
            $(document).on('focus', '.custom-datatype-section select', function() {
                var propertyId = $(this).attr('id').split('_').pop();
                var value = $(`#custom_value_${propertyId}`).val();

                if (value) {
                    validateValue(propertyId, value);
                }
            });

            // Valida l'URI dell'entità
            $('#custom_entity_uri').on('input change', function() {
                validateUrlInput($(this));
            });

            // Validazione per i campi Property URI
            $(document).on('input change', '.custom-property input[type="url"]', function() {
                validateUrlInput($(this));
            });

            $(document).on('change', '.custom-value-type', function() {
                var propertyId = $(this).attr('id').split('_').pop();
                var selectedValueType = $(this).val();
                
                // Trova l'input associato a questo valore
                var valueInput = $(`#custom_value_${propertyId}`);
                
                if (selectedValueType === 'uri') {
                    // Aggiungi il messaggio di errore se non esiste già
                    if (valueInput.next('.invalid-feedback').length === 0) {
                        valueInput.after('<div class="invalid-feedback mb-2">{{ _("Please enter a valid URL") }}</div>');
                    }
                    // Cambia il tipo dell'input in 'url' e aggiungi validazione URL
                    valueInput.attr('type', 'url');
                    valueInput.on('input change', function() {
                        validateUrlInput($(this));
                    });
                } else {
                    // Cambia il tipo dell'input in 'text' se è un literal
                    valueInput.attr('type', 'text');
                    // Rimuovi la validazione URL se non è più un URI
                    valueInput.off('input change', validateUrlInput);
                    valueInput.removeClass('is-invalid');  // Rimuovi eventuali stati di errore
                    valueInput.next('.invalid-feedback').remove();  // Rimuovi il messaggio di errore
                }
            });

            // Gestione della visualizzazione dinamica del datatype
            $(document).on('change', '.custom-value-input', function() {
                var propertyId = $(this).attr('id').split('_').pop();
                // Reset del datatype su xsd:string ogni volta che il valore cambia
                $(`#custom_datatype_${propertyId}`).val('http://www.w3.org/2001/XMLSchema#string');                
            });

            toggleRemoveButtons();

            // Funzione ricorsiva per raccogliere i dati dai campi del form
            function collectFormData(container, data, depth = 0) {
                if ('{{shacl}}' === 'True') {
                    container.find('[data-repeater-list]').each(function() {
                        let repeaterList = $(this);
                        let predicateUri = repeaterList.find('[data-repeater-item]:first').data('predicate-uri');
                        
                        repeaterList.find('[data-repeater-item]:visible').each(function(index) {
                            let repeaterItem = $(this);
                            let objectClass = repeaterItem.find('[data-object-class]:visible').first().data('object-class');
                            let itemDepth = parseInt(repeaterItem.data('depth'));

                            if (predicateUri && objectClass && itemDepth === depth) {
                                if (!Array.isArray(data[predicateUri])) {
                                    data[predicateUri] = [];
                                }

                                if (repeaterItem.data('intermediate-relation')) {
                                    let intermediateClass = repeaterItem.data('intermediate-relation');
                                    let connectingProperty = repeaterItem.data('connecting-property');
                                    let intermediateEntity = {
                                        "entity_type": intermediateClass,
                                        "properties": {}
                                    };

                                    intermediateEntity.properties[connectingProperty] = {
                                        "entity_type": objectClass,
                                        "properties": {}
                                    };

                                    let additionalProperties = repeaterItem.data('additional-properties');
                                    if (additionalProperties) {
                                        Object.assign(intermediateEntity.properties, additionalProperties);
                                    }

                                    collectFormData(repeaterItem, intermediateEntity.properties[connectingProperty].properties, depth + 1);
                                    data[predicateUri].push(intermediateEntity);
                                } else {
                                    let nestedEntity = {
                                        "entity_type": objectClass,
                                        "properties": {}
                                    };

                                    collectFormData(repeaterItem, nestedEntity.properties, depth + 1);

                                    if (Object.keys(nestedEntity.properties).length > 0) {
                                        data[predicateUri].push(nestedEntity);
                                    }
                                }
                            } else if (itemDepth === depth) {
                                repeaterItem.find('input:visible, select:visible').each(function() {
                                    let propertyUri = $(this).data('predicate-uri');
                                    if (propertyUri) {
                                        let value = $(this).val();
                                        if (value !== "") {
                                            if (!data[propertyUri]) {
                                                data[propertyUri] = [];
                                            }
                                            data[propertyUri].push(value);
                                        }
                                    }
                                });
                            }
                        });
                    });

                    container.children('input:visible, select:visible').each(function() {
                        let propertyUri = $(this).data('predicate-uri');
                        let inputDepth = parseInt($(this).data('depth'));
                        if (propertyUri && inputDepth === depth) {
                            let value = $(this).val();
                            if (value !== "") {
                                if (!data[propertyUri]) {
                                    data[propertyUri] = [];
                                }
                                data[propertyUri].push(value);
                            }
                        }
                    });
                } else {
                    $('.custom-property').each(function() {
                        let propertyUri = $(this).find('input[type="url"]').val();
                        let propertyValue = $(this).find('.custom-value-input').val();
                        let valueType = $(this).find('.custom-value-type').val();
                        let datatype = $(this).find('select[id^="custom_datatype_"]').val();

                        if (propertyUri && propertyValue) {
                            if (!data[propertyUri]) {
                                data[propertyUri] = [];
                            }
                            if (valueType === 'uri') {
                                data[propertyUri].push({
                                    value: propertyValue,
                                    type: 'uri'
                                });
                            } else {
                                data[propertyUri].push({
                                    value: propertyValue,
                                    type: 'literal',
                                    datatype: datatype
                                });
                            }
                        }
                    });
                }
            }

            $('#entityForm').on('submit', function(event) {
                event.preventDefault();

                let structuredData = {};

                if ('{{shacl}}' === 'True') {
                    structuredData = {
                        entity_type: $('#entity_type').val(),
                        properties: {}
                    };
                    collectFormData($('#entityForm'), structuredData.properties);
                } else {
                    structuredData = {
                        properties: {}
                    };
                    collectFormData(null, structuredData.properties);
                }

                $('#structured_data').val(JSON.stringify(structuredData));

                // Validazione
                let isValid = Object.keys(structuredData.properties).length > 0;

                if (!isValid) {
                    Swal.fire({
                        icon: 'error',
                        title: '{{ _("Invalid Submission") }}',
                        text: '{{ _("Please provide at least one valid property with URI and value") }}',
                        confirmButtonText: '{{ _("OK") }}'
                    });
                    return;  // Blocca l'invio del form se non valido
                }

                this.submit();
            });
        });
    </script>
</div>

{% endblock %}