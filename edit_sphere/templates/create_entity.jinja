{% macro render_form_field(entity_type, prop, details, entity_types, prefix, form_fields, counter=1, depth=0, max_depth=5) %}
    {% if depth <= max_depth %}
        {% set unique_id_base = (prefix + entity_type | human_readable_predicate(entity_types, False) | replace(" ", "_") + "_" + prop | human_readable_predicate(entity_types, False) | replace(" ", "_") + "_" + counter | string) %}

        <div data-repeater-list="{{ unique_id_base }}" data-counter="{{ counter }}" data-max-items="{{ details.max }}">
            <div data-repeater-item class="input-group mb-3" style="position: relative; padding-right: 3.5rem;">
                {% if details.intermediateRelation %}
                    <div class="d-flex flex-column">
                        <div class="nested-form-header mb-4">
                            <h6>{{ details.displayName or (prop | human_readable_predicate(entity_types, False)) }}</h6>
                            <button class="btn btn-outline-secondary btn-sm toggle-btn" type="button" data-bs-toggle="collapse" data-bs-target="#{{ unique_id_base }}_nested_form" aria-expanded="false" aria-controls="{{ unique_id_base }}_nested_form">
                                <span id="{{ unique_id_base }}_toggle_icon" class="bi bi-chevron-right"></span>
                            </button>
                        </div>
                        <div id="{{ unique_id_base }}_nested_form" class="nested-form-container collapse">
                            {% for inter_prop, inter_details in details.intermediateRelation.properties.items() %}
                                {{ render_form_field(details.intermediateRelation.targetEntityType, inter_prop, inter_details, entity_types, unique_id_base + '_', form_fields, counter, depth + 1, max_depth) }}
                            {% endfor %}
                        </div>
                    </div>
                {% elif details.objectClass and details.objectClass in entity_types %}
                    <div class="d-flex flex-column">
                        <div class="nested-form-header mb-4">
                            <h6>{{ details.displayName or (prop | human_readable_predicate(entity_types, False)) }}</h6>
                            <button class="btn btn-outline-secondary btn-sm toggle-btn" type="button" data-bs-toggle="collapse" data-bs-target="#{{ unique_id_base }}_nested_form" aria-expanded="false" aria-controls="{{ unique_id_base }}_nested_form">
                                <span id="{{ unique_id_base }}_toggle_icon" class="bi bi-chevron-right"></span>
                            </button>
                        </div>
                        <div id="{{ unique_id_base }}_nested_form" class="nested-form-container collapse">
                            {% for nested_prop, nested_details in form_fields[details.objectClass].items() %}
                                {{ render_form_field(details.objectClass, nested_prop, nested_details, entity_types, unique_id_base + '_', form_fields, counter, depth + 1, max_depth) }}
                            {% endfor %}
                        </div>
                    </div>
                {% elif details.optionalValues and details.optionalValues|length %}
                    <div class="form-floating flex-grow-1">
                        <select class="form-select" id="{{ unique_id_base }}" name="{{ unique_id_base }}">
                            {% for val in details.optionalValues %}
                                <option value="{{ val }}">{{ val | human_readable_predicate(entity_types, False) }}</option>
                            {% endfor %}
                        </select>
                        <label for="{{ unique_id_base }}" class="input-group-select">{{ details.displayName or (prop | human_readable_predicate(entity_types, False)) }}</label>
                    </div>
                {% else %}
                    <div class="form-floating flex-grow-1">
                        <input type="text" class="form-control" id="{{ unique_id_base }}" name="{{ unique_id_base }}" placeholder="{{ details.displayName or (prop | human_readable_predicate(entity_types, False)) }}" {{ 'required' if details.min and details.min > 0 }}>
                        <label for="{{ unique_id_base }}">{{ details.displayName or (prop | human_readable_predicate(entity_types, False)) }}</label>
                    </div>
                {% endif %}
                {% if not details.max or details.max > 1 %}
                    <button data-repeater-delete type="button" class="repeater-delete-btn">
                        <i class="bi bi-x"></i>
                    </button>
                {% endif %}
            </div>
            {% if not details.max or details.max > 1 %}
                <div class="mb-3 text-start" data-repeater-create>
                    <button type="button" class="btn btn-link text-secondary">{{ _("Add another %(element_type)s", element_type=details.displayName or (prop | human_readable_predicate(entity_types, False))) }}</button>
                </div>
            {% endif %}
        </div>
    {% endif %}
{% endmacro %}

{% extends "_base.jinja" %}
{% block content %}

<style>
    .nested-form-container {
        border-left: .2rem solid #eee;
        padding-left: 1rem;
        margin-left: 1rem;
        position: relative;
    }

    .repeater-delete-btn {
        position: absolute;
        top: 0.5rem;
        right: 0.5rem;
        background-color: transparent;
        border: 1px solid #dc3545;
        color: #dc3545;
        font-size: 1.2rem;
        cursor: pointer;
        transition: background-color 0.2s, color 0.2s, border 0.2s;
    }

    .repeater-delete-btn:hover {
        background-color: #dc3545;
        color: #fff;
        border-color: #dc3545;
    }

    .input-group {
        position: relative;
        padding-right: 3.5rem; /* Adjusted padding to make space for delete button */
    }

    .nested-form-header .toggle-btn.collapsed {
        transform: rotate(0deg);
    }

    .nested-form-header .toggle-btn:not(.collapsed) {
        transform: rotate(90deg);
    }
</style>

<div class="container mt-5">
    <h2 class="mb-4">{{ _('Add New Record') }}</h2>

    <form action="{{ url_for('create_entity') }}" method="post" id="entityForm">
        {% if form_fields %}
            <div class="form-floating mb-3">
                <select class="form-select" id="entity_type" name="entity_type">
                    <option value="" disabled selected>{{_('Select an entity type')}}</option>
                    {% for entity_type in entity_types %}
                        <option value="{{ entity_type }}" data-uri="{{ entity_type }}">{{ entity_type | human_readable_predicate(entity_types, False) }}</option>
                    {% endfor %}
                </select>
                <label for="entity_type" class="form-label">{{_('Select an entity type')}}</label>
            </div>

            {% for entity_type, properties in form_fields.items() %}
                {% set group_id = (entity_type | human_readable_predicate(entity_types, False) + "_group") | replace(" ", "_") %}
                <div class="property-group mb-3" id="{{ group_id }}" data-uri="{{ entity_type }}" style="display:none">
                    {% for prop, details in properties.items() %}
                        {{ render_form_field(entity_type, prop, details, entity_types, '', form_fields) }}
                    {% endfor %}
                </div>
            {% endfor %}
        {% else %}
            <div id="custom-entity-form">
                <div class="mb-3">
                    <label for="custom_type" class="form-label">{{_('Entity Type URI')}}</label>
                    <input type="url" class="form-control" id="custom_type" name="custom_type" required>
                </div>
                <div id="custom-properties">
                    <div class="mb-3 custom-property" data-property-id="1">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <label for="custom_property_1" class="form-label mb-0">{{_('Property')}} 1</label>
                            <button type="button" class="btn btn-danger btn-sm remove-property" data-property-id="1">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                        <input type="text" class="form-control mb-2" id="custom_property_1" name="custom_property_1" placeholder="Property URI">
                        <input type="text" class="form-control" id="custom_value_1" name="custom_value_1" placeholder="Value">
                    </div>
                </div>
                <button type="button" id="add-property" class="btn btn-secondary mb-3">{{_('Add Property')}}</button>
            </div>
        {% endif %}
        <div class="mb-3">
            <input type="submit" value="{{ _('Create') }}" class="btn btn-primary">
        </div>

    </form>

    <script>
        $(document).ready(function() {
            function generateUniqueId(prefix) {
                return prefix + '_' + Math.random().toString(36).substr(2, 9);
            }

            function updateRemoveButtons(list) {
                list.find('[data-repeater-item]').each(function(index) {
                    if (index === 0) {
                        $(this).find('.repeater-delete-btn').hide();
                    } else {
                        $(this).find('.repeater-delete-btn').show();
                    }
                });
            }

            function updateAddButton(list) {
                var maxItems = parseInt(list.data('max-items')) || Infinity;
                var counter = list.find('[data-repeater-item]').length;
                var addButton = list.find('[data-repeater-create]').first();
                if (counter >= maxItems) {
                    addButton.hide();
                } else {
                    addButton.show();
                }
            }

            // Store initial copies of repeater items
            var initialCopies = {};

            $('[data-repeater-list]').each(function() {
                var list = $(this);
                var firstItem = list.find('[data-repeater-item]').first();
                initialCopies[list.data('repeater-list')] = firstItem.clone(true, true);
            });

            // Handle entity type selection
            $('#entity_type').change(function() {
                let selectedUri = $(this).find(':selected').data('uri');
                
                // Hide and disable all groups
                $('.property-group').hide().find(':input').prop('disabled', true);
                
                // Show and enable the selected group
                let selectedGroup = $(`.property-group[data-uri="${selectedUri}"]`);
                selectedGroup.show().find(':input').prop('disabled', false);
            });

            // Toggle nested forms
            $(document).on('click', '.toggle-btn', function(e) {
                e.stopPropagation();
                let target = $(this).attr('data-bs-target');
                $(target).collapse('toggle');
            });

            function bindRepeaterEvents(context) {
                context.find('[data-repeater-create]').off('click').on('click', function() {
                    var list = $(this).closest('[data-repeater-list]');
                    var maxItems = parseInt(list.data('max-items')) || Infinity;
                    var counter = list.find('[data-repeater-item]').length;
                    if (counter < maxItems) {
                        // Clone the initial copy for this list
                        var newItem = initialCopies[list.data('repeater-list')].clone(true, true);

                        // Reset values and nested elements
                        newItem.find('input, select, textarea').each(function() {
                            var elem = $(this);
                            var elemId = elem.attr('id');
                            
                            if (elemId) {
                                var newId = generateUniqueId(elemId.replace(/_[a-zA-Z0-9]+$/, ''));
                                elem.attr('id', newId);
                                elem.attr('name', newId);
                            }
                            
                            // Reset value
                            if (elem.is('select')) {
                                elem.find('option:first').prop('selected', true);
                            } else {
                                elem.val('');
                            }
                        });

                        // Update nested IDs for collapse elements
                        newItem.find('.nested-form-header').each(function() {
                            var $header = $(this);
                            var $toggleBtn = $header.find('.toggle-btn');
                            var $collapseDiv = $header.next('.nested-form-container');
                            
                            var newId = generateUniqueId('nested_form');
                            $toggleBtn.attr('data-bs-target', '#' + newId);
                            $toggleBtn.attr('aria-controls', newId);
                            $collapseDiv.attr('id', newId);
                            
                            // Re-initialize Bootstrap collapse
                            $collapseDiv.collapse({toggle: false});
                        });

                        // Append the new item within its level
                        newItem.appendTo(list);
                        list.children('[data-repeater-create]').appendTo(list);
                        updateRemoveButtons(list);
                        updateAddButton(list);

                        // Re-bind events for newly added items
                        bindRepeaterEvents(newItem);
                    }
                });

                context.find('[data-repeater-delete]').off('click').on('click', function() {
                    var list = $(this).closest('[data-repeater-list]');
                    $(this).closest('[data-repeater-item]').remove();
                    updateRemoveButtons(list);
                    updateAddButton(list);
                });

                context.find('.collapse').on('shown.bs.collapse', function(e) {
                    e.stopPropagation(); // Prevent the event from bubbling up
                    $(this).prev('.nested-form-header').find('.toggle-btn').removeClass('collapsed');
                });

                context.find('.collapse').on('hidden.bs.collapse', function(e) {
                    e.stopPropagation(); // Prevent the event from bubbling up
                    $(this).prev('.nested-form-header').find('.toggle-btn').addClass('collapsed');
                });

                // Initial state check
                context.find('.collapse').each(function() {
                    if ($(this).hasClass('show')) {
                        $(this).prev('.nested-form-header').find('.toggle-btn').removeClass('collapsed');
                    } else {
                        $(this).prev('.nested-form-header').find('.toggle-btn').addClass('collapsed');
                    }
                });
            }

            // Initialize repeater events
            bindRepeaterEvents($(document));

            // Handle custom entity form
            let propertyCount = 1;
            
            $('#add-property').click(function() {
                propertyCount++;
                let newProperty = `
                    <div class="mb-3 custom-property" data-property-id="${propertyCount}">
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <label for="custom_property_${propertyCount}" class="form-label mb-0">{{_('Property')}} ${propertyCount}</label>
                            <button type="button" class="btn btn-danger btn-sm remove-property" data-property-id="${propertyCount}">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                        <input type="text" class="form-control mb-2" id="custom_property_${propertyCount}" name="custom_property_${propertyCount}" placeholder="Property URI">
                        <input type="text" class="form-control" id="custom_value_${propertyCount}" name="custom_value_${propertyCount}" placeholder="Value">
                    </div>
                `;
                $('#custom-properties').append(newProperty);
            });

            // Handle property removal
            $('#custom-properties').on('click', '.remove-property', function() {
                let propertyId = $(this).data('property-id');
                $(`div[data-property-id="${propertyId}"]`).remove();
                updatePropertyLabels();
            });

            function updatePropertyLabels() {
                $('.custom-property').each(function(index) {
                    let newIndex = index + 1;
                    $(this).attr('data-property-id', newIndex);
                    $(this).find('.form-label').text(`{{_('Property')}} ${newIndex}`);
                    $(this).find('input').each(function() {
                        let oldName = $(this).attr('name');
                        let newName = oldName.replace(/\d+/, newIndex);
                        $(this).attr('name', newName);
                        $(this).attr('id', newName);
                    });
                    $(this).find('.remove-property').attr('data-property-id', newIndex);
                });
                propertyCount = $('.custom-property').length;
            }
        });
    </script>
</div>

{% endblock %}